<?php /* Eden_Class */
if(!class_exists('Eden_Class')){class Eden_Class{const DEBUG='DEBUG %s:';const INSTANCE=0;private static $_instances=array();public static function i(){if(static::INSTANCE===1){return self::_getSingleton();}return self::_getMultiple();}public function __call($name,$args){if(preg_match("/^[A-Z]/",$name)){try{return Eden_Route::i()->getClass($name,$args);}catch(Eden_Route_Error $e){}}try{return Eden_Route::i()->getMethod()->call($this,$name,$args);}catch(Eden_Route_Error $e){Eden_Error::i($e->getMessage())->trigger();}}public function __invoke(){if(func_num_args()==0){return $this;}$args=func_get_args();if(is_array($args[0])){$args=$args[0];}$class=array_shift($args);if(strpos('Eden_',$class) !==0){$class='Eden_'.$class;}try{return Eden_Route::i()->getClass($class,$args);}catch(Eden_Route_Error $e){Eden_Error::i($e->getMessage())->trigger();}}public function __toString(){return get_class($this);}public function callThis($method,array $args=array()){Eden_Error::i()->argument(1,'string');return Eden_Route::i()->getMethod($this,$method,$args);}public function debug($variable=NULL,$next=NULL){$class=get_class($this);if(is_null($variable)){Eden_Debug::i()->output(sprintf(self::DEBUG,$class))->output($this);return $this;}if($variable===true){return Eden_Debug::i()->next($this,$next);}if(!is_string($variable)){Eden_Debug::i()->output(Eden_Error::DEBUG_NOT_STRING);return $this;}if(isset($this->$variable)){Eden_Debug::i()->output(sprintf(self::DEBUG,$class.'->'.$variable))->output($this->$variable);return $this;}$private='_'.$variable;if(isset($this->$private)){Eden_Debug::i()->output(sprintf(self::DEBUG,$class.'->'.$private))->output($this->$private);return $this;}Eden_Debug::i()->output(sprintf(Eden_Error::DEBUG_NOT_PROPERTY,$variable,$class));return $this;}public function each($callback){Eden_Error::i()->argument(1,'callable');return Eden_Loop::i()->iterate($this,$callback);}public function routeThis($route){Eden_Error::i()->argument(1,'string');if(func_num_args()==1){Eden_Route::i()->getClass()->route($route,$this);return $this;}Eden_Error::i()->argument(2,'string','object');$args=func_get_args();$source=array_shift($args);$class=array_shift($args);$destination=NULL;if(count($args)){$destination=array_shift($args);}Eden_Route::i()->getMethod()->route($this,$source,$class,$destination);return $this;}public function when($isTrue,$lines=0){if($isTrue){return $this;}return Eden_When::i($this,$lines);}protected static function _getMultiple($class=NULL){if(is_null($class) && function_exists('get_called_class')){$class=get_called_class();}$class=Eden_Route::i()->getClass()->getRoute($class);return self::_getInstance($class);}protected static function _getSingleton($class=NULL){if(is_null($class) && function_exists('get_called_class')){$class=get_called_class();}$class=Eden_Route::i()->getClass()->getRoute($class);if(!isset(self::$_instances[$class])){self::$_instances[$class]=self::_getInstance($class);}return self::$_instances[$class];}private static function _getInstance($class){$trace=debug_backtrace();$args=array();if(isset($trace[1]['args']) && count($trace[1]['args']) > 1){$args=$trace[1]['args'];array_shift($args);}else if(isset($trace[2]['args']) && count($trace[2]['args']) > 0){$args=$trace[2]['args'];}if(count($args)===0 || !method_exists($class,'__construct')){return new $class;}$reflect=new ReflectionClass($class);try{return $reflect->newInstanceArgs($args);}catch(Reflection_Exception $e){Eden_Error::i()->setMessage(Eden_Error::REFLECTION_ERROR)->addVariable($class)->addVariable('new')->trigger();}}}}
/* Eden_Error */
if(!class_exists('Eden_Error')){class Eden_Error extends Exception{const REFLECTION_ERROR='Error creating Reflection Class: %s,Method: %s.';const INVALID_ARGUMENT='Argument %d in %s() was expecting %s,however %s was given.';const ARGUMENT='ARGUMENT';const LOGIC='LOGIC';const GENERAL='GENERAL';const CRITICAL='CRITICAL';const WARNING='WARNING';const ERROR='ERROR';const DEBUG='DEBUG';const INFORMATION='INFORMATION';const DEBUG_NOT_STRING='Debug was expecting a string';const DEBUG_NOT_PROPERTY='Debug: %s is not a property of %s';protected $_reporter=NULL;protected $_type=NULL;protected $_level=NULL;protected $_offset=1;protected $_variables=array();protected $_trace=array();protected static $_argumentTest=true;public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}public function __construct($message=NULL,$code=0){$this->_type=self::LOGIC;$this->_level=self::ERROR;parent::__construct($message,$code);}public function addVariable($variable){$this->_variables[]=$variable;return $this;}public function argument($index,$types){if(!self::$_argumentTest){return $this;}$trace=debug_backtrace();$trace=$trace[1];$types=func_get_args();$index=array_shift($types) - 1;if($index < 0){$index=0;}if($index >=count($trace['args'])){return $this;}$argument=$trace['args'][$index];foreach($types as $i=>$type){if($this->_isValid($type,$argument)){return $this;}}$method=$trace['function'];if(isset($trace['class'])){$method=$trace['class'].'->'.$method;}$type=$this->_getType($argument);$this->setMessage(self::INVALID_ARGUMENT)->addVariable($index + 1)->addVariable($method)->addVariable(implode(' or ',$types))->addVariable($type)->setTypeLogic()->setTraceOffset(1)->trigger();}public function getLevel(){return $this->_level;}public function getRawTrace(){return $this->_trace;}public function getReporter(){return $this->_reporter;}public function getTraceOffset(){return $this->_offset;}public function getType(){return $this->_type;}public function getVariables(){return $this->_variables;}public function noArgTest(){self::$_argumentTest=false;return $this;}public function setLevel($level){$this->_level=$level;return $this;}public function setLevelDebug(){return $this->setLevel(self::DEBUG);}public function setLevelError(){return $this->setLevel(self::WARNING);}public function setLevelInformation(){return $this->setLevel(self::INFORMATION);}public function setLevelWarning(){return $this->setLevel(self::WARNING);}public function setMessage($message){$this->message=$message;return $this;}public function setTraceOffset($offset){$this->_offset=$offset;return $this;}public function setType($type){$this->_type=$type;return $this;}public function setTypeArgument(){return $this->setType(self::ARGUMENT);}public function setTypeCritical(){return $this->setType(self::CRITICAL);}public function setTypeGeneral(){return $this->setType(self::GENERAL);}public function setTypeLogic(){return $this->setType(self::CRITICAL);}public function trigger(){$this->_trace=debug_backtrace();$this->_reporter=get_class($this);if(isset($this->_trace[$this->_offset]['class'])){$this->_reporter=$this->_trace[$this->_offset]['class'];}if(isset($this->_trace[$this->_offset]['file'])){$this->file=$this->_trace[$this->_offset]['file'];}if(isset($this->_trace[$this->_offset]['line'])){$this->line=$this->_trace[$this->_offset]['line'];}if(!empty($this->_variables)){$this->message=vsprintf($this->message,$this->_variables);$this->_variables=array();}throw $this;}public function vargument($method,$args,$index,$types){if(!self::$_argumentTest){return $this;}$trace=debug_backtrace();$trace=$trace[1];$types=func_get_args();$method=array_shift($types);$args=array_shift($types);$index=array_shift($types) - 1;if($index < 0){$index=0;}if($index >=count($args)){return $this;}$argument=$args[$index];foreach($types as $i=>$type){if($this->_isValid($type,$argument)){return $this;}}$method=$trace['class'].'->'.$method;$type=$this->_getType($argument);$this->setMessage(self::INVALID_ARGUMENT)->addVariable($index + 1)->addVariable($method)->addVariable(implode(' or ',$types))->addVariable($type)->setTypeLogic()->setTraceOffset(1)->trigger();}protected function _isCreditCard($value){return preg_match('/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]'.'{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-'.'5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/',$value);}protected function _isEmail($value){return preg_match('/^(?:(?:(?:[^@,"\[\]\x5c\x00-\x20\x7f-\xff\.]|\x5c(?=[@,"\[\]'.'\x5c\x00-\x20\x7f-\xff]))(?:[^@,"\[\]\x5c\x00-\x20\x7f-\xff\.]|(?<=\x5c)[@,"\[\]'.'\x5c\x00-\x20\x7f-\xff]|\x5c(?=[@,"\[\]\x5c\x00-\x20\x7f-\xff])|\.(?=[^\.])){1,62'.'}(?:[^@,"\[\]\x5c\x00-\x20\x7f-\xff\.]|(?<=\x5c)[@,"\[\]\x5c\x00-\x20\x7f-\xff])|'.'[^@,"\[\]\x5c\x00-\x20\x7f-\xff\.]{1,2})|"(?:[^"]|(?<=\x5c)"){1,62}")@(?:(?!.{64})'.'(?:[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.?|[a-zA-Z0-9]\.?)+\.(?:xn--[a-zA-Z0-9]'.'+|[a-zA-Z]{2,6})|\[(?:[0-1]?\d?\d|2[0-4]\d|25[0-5])(?:\.(?:[0-1]?\d?\d|2[0-4]\d|25'.'[0-5])){3}\])$/',$value);}protected function _isHex($value){return preg_match("/^[0-9a-fA-F]{6}$/",$value);}protected function _isHtml($value){return preg_match("/<\/?\w+((\s+(\w|\w[\w-]*\w)(\s*=\s*"."(?:\".*?\"|'.*?'|[^'\">\s]+))?)+\s*|\s*)\/?>/i",$value);}protected function _isUrl($value){return preg_match('/^(http|https|ftp):\/\/([A-Z0-9][A-Z0'.'-9_-]*(?:.[A-Z0-9][A-Z0-9_-]*)+):?(d+)?\/?/i',$value);}public function _alphaNum($value){return preg_match('/^[a-zA-Z0-9]+$/',$value);}public function _alphaNumScore($value){return preg_match('/^[a-zA-Z0-9_]+$/',$value);}public function _alphaNumHyphen($value){return preg_match('/^[a-zA-Z0-9-]+$/',$value);}public function _alphaNumLine($value){return preg_match('/^[a-zA-Z0-9-_]+$/',$value);}protected function _isValid($type,$data){$type=$this->_getTypeName($type);switch($type){case 'number': return is_numeric($data);case 'int': return is_numeric($data) && strpos((string) $data,'.')===false;case 'float': return is_numeric($data) && strpos((string) $data,'.') !==false;case 'file': return is_string($data) && file_exists($data);case 'folder': return is_string($data) && is_dir($data);case 'email': return is_string($data) && $this->_isEmail($data);case 'url': return is_string($data) && $this->_isUrl($data);case 'html': return is_string($data) && $this->_isHtml($data);case 'cc': return (is_string($data) || is_int($data)) && $this->_isCreditCard($data);case 'hex': return is_string($data) && $this->_isHex($data);case 'alphanum': return is_string($data) && $this->_alphaNum($data);case 'alphanumscore': return is_string($data) && $this->_alphaNumScore($data);case 'alphanumhyphen': return is_string($data) && $this->_alphaNumHyphen($data);case 'alphanumline': return is_string($data) && $this->_alphaNumLine($data);default: break;}$method='is_'.$type;if(function_exists($method)){return $method($data);}if(class_exists($type)){return $data instanceof $type;}return true;}private function _getType($data){if(is_string($data)){return "'".$data."'";}if(is_numeric($data)){return $data;}if(is_array($data)){return 'Array';}if(is_bool($data)){return $data ? 'true' : 'false';}if(is_object($data)){return get_class($data);}if(is_null($data)){return 'null';}return 'unknown';}private function _getTypeName($data){if(is_string($data)){return $data;}if(is_numeric($data)){return 'numeric';}if(is_array($data)){return 'array';}if(is_bool($data)){return 'bool';}if(is_object($data)){return get_class($data);}if(is_null($data)){return 'null';}}}}
/* Eden_Event */
if(!class_exists('Eden_Event')){class Eden_Event extends Eden_Class{protected $_observers=array();public static function i(){return self::_getSingleton(__CLASS__);}public function listen($event,$instance,$method=NULL,$important=false){$error=Eden_Event_Error::i()->argument(1,'string')->argument(2,'object','string','callable')->argument(3,'null','string','bool')->argument(4,'bool');if(is_bool($method)){$important=$method;$method=NULL;}$id=$this->_getId($instance,$method);$callable=$this->_getCallable($instance,$method);$observer=array($event,$id,$callable);if($important){array_unshift($this->_observers,$observer);return $this;}$this->_observers[]=$observer;return $this;}public function trigger($event=NULL){Eden_Event_Error::i()->argument(1,'string','null');if(is_null($event)){$trace=debug_backtrace();$event=$trace[1]['function'];}$args=func_get_args();$event=array_shift($args);array_unshift($args,$this,$event);foreach($this->_observers as $observer){if($event==$observer[0] && call_user_func_array($observer[2],$args)===false){break;}}return $this;}public function unlisten($event,$instance=NULL,$method=NULL){Eden_Event_Error::i()->argument(1,'string','null')->argument(2,'object','string','null')->argument(3,'string','null');if(is_null($event) && is_null($instance)){$this->_observers=array();return $this;}$id=$this->_getId($instance,$method);if($id===false){return false;}foreach($this->_observers as $i=>$observer){if(!is_null($event) && $event !=$observer[0]){continue;}if($id==$observer[1] && is_array($observer[2]) && $method !=$observer[2][1]){continue;}if($id !=$observer[1]){continue;}unset($this->_observers[$i]);}return $this;}protected function _getCallable($instance,$method=NULL){if(class_exists('Closure') && $instance instanceof Closure){return $instance;}if(is_object($instance)){return array($instance,$method);}if(is_string($instance) && is_string($method)){return $instance.'::'.$method;}if(is_string($instance)){return $instance;}return NULL;}protected function _getId($instance,$method=NULL){if(is_object($instance)){return spl_object_hash($instance);}if(is_string($instance) && is_string($method)){return $instance.'::'.$method;}if(is_string($instance)){return $instance;}return false;}}class Eden_Event_Error extends Eden_Error{const NO_METHOD='Instance %s was passed but,no callable method was passed in listen().';public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Error_Event */
if(!class_exists('Eden_Error_Event')){class Eden_Error_Event extends Eden_Event{const PHP='PHP';const UNKNOWN='UNKNOWN';const WARNING='WARNING';const ERROR='ERROR';public static function i(){return self::_getSingleton(__CLASS__);}public function errorHandler($errno,$errstr,$errfile,$errline){switch ($errno){case E_NOTICE: case E_USER_NOTICE: case E_WARNING: case E_USER_WARNING: $level=self::WARNING;break;case E_ERROR: case E_USER_ERROR: default: $level=self::ERROR;break;}$type=self::PHP;$trace=debug_backtrace();$class=self::UNKNOWN;if(count($trace) > 1){$class=$trace[1]['function'].'()';if(isset($trace[1]['class'])){$class=$trace[1]['class'].'->'.$class;}}$this->trigger( 'error',$type,$level,$class,$errfile,$errline,$errstr,$trace,1);return true;}public function exceptionHandler(Exception $e){$type=Eden_Error::LOGIC;$level=Eden_Error::ERROR;$offset=1;$reporter=get_class($e);$trace=$e->getTrace();$message=$e->getMessage();if($e instanceof Eden_Error){$trace=$e->getRawTrace();$type=$e->getType();$level=$e->getLevel();$offset=$e->getTraceOffset();$reporter=$e->getReporter();}$this->trigger( 'exception',$type,$level,$reporter,$e->getFile(),$e->getLine(),$message,$trace,$offset);}public function releaseErrorHandler(){restore_error_handler();return $this;}public function releaseExceptionHandler(){restore_exception_handler();return $this;}public function setErrorHandler(){set_error_handler(array($this,'errorHandler'));return $this;}public function setExceptionHandler(){set_exception_handler(array($this,'exceptionHandler'));return $this;}public function setReporting($type){error_reporting($type);return $this;}}}
/* Eden_Route_Error */
if(!class_exists('Eden_Route_Error')){class Eden_Route_Error extends Eden_Error{const CLASS_NOT_EXISTS='Invalid class call: %s->%s().Class does not exist.';const METHOD_NOT_EXISTS='Invalid class call: %s->%s().Method does not exist.';const STATIC_ERROR='Invalid class call: %s::%s().';const FUNCTION_ERROR='Invalid function run: %s().';public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Route_Class */
if(!class_exists('Eden_Route_Class')){class Eden_Route_Class extends Eden_Class{protected static $_instance=NULL;protected $_route=array();public static function i(){$class=__CLASS__;if(is_null(self::$_instance)){self::$_instance=new $class();}return self::$_instance;}public function call($class){Eden_Route_Error::i()->argument(1,'string');$args=func_get_args();$class=array_shift($args);return $this->callArray($class,$args);}public function callArray($class,array $args=array()){Eden_Route_Error::i()->argument(1,'string');$route=$this->getRoute($class);if(is_object($route)){return $route;}$reflect=new ReflectionClass($route);if(method_exists($route,'i')){$declared=$reflect->getMethod('i')->getDeclaringClass()->getName();return Eden_Route_Method::i()->callStatic($class,'i',$args);}return $reflect->newInstanceArgs($args);}public function getRoute($route){Eden_Route_Error::i()->argument(1,'string');if($this->isRoute($route)){return $this->_route[strtolower($route)];}return $route;}public function getRoutes(){return $this->_route;}public function isRoute($route){return isset($this->_route[strtolower($route)]);}public function release($route){if($this->isRoute($route)){unset($this->_route[strtolower($route)]);}return $this;}public function route($route,$class){Eden_Route_Error::i()->argument(1,'string','object')->argument(2,'string','object');if(is_object($route)){$route=get_class($route);}if(is_string($class)){$class=$this->getRoute($class);}$this->_route[strtolower($route)]=$class;return $this;}}}
/* Eden_Route_Method */
if(!class_exists('Eden_Route_Method')){class Eden_Route_Method extends Eden_Class{protected static $_instance=NULL;protected $_route=array();public static function i(){$class=__CLASS__;if(is_null(self::$_instance)){self::$_instance=new $class();}return self::$_instance;}public function call($class,$method,array $args=array()){Eden_Route_Error::i()->argument(1,'string','object')->argument(2,'string');$instance=NULL;if(is_object($class)){$instance=$class;$class=get_class($class);}$classRoute=Eden_Route_Class::i();$isClassRoute=$classRoute->isRoute($class);$isMethodRoute=$this->isRoute($class,$method);list($class,$method)=$this->getRoute($class,$method);if(!is_object($class) && !class_exists($class)){Eden_Route_Error::i()->setMessage(Eden_Route_Error::CLASS_NOT_EXISTS)->addVariable($class)->addVariable($method)->trigger();}if(!$isClassRoute && !$isMethodRoute && !method_exists($class,$method)){Eden_Route_Error::i()->setMessage(Eden_Route_Error::METHOD_NOT_EXISTS)->addVariable($class)->addVariable($method)->trigger();}if($isClassRoute || !$instance){$instance=$classRoute->call($class);}return call_user_func_array(array(&$instance,$method),$args);}public function callStatic($class,$method,array $args=array()){Eden_Route_Error::i()->argument(1,'string','object')->argument(2,'string');if(is_object($class)){$class=get_class($class);}$isClassRoute=Eden_Route_Class::i()->isRoute($class);$isMethodRoute=$this->isRoute($class,$method);list($class,$method)=$this->getRoute($class,$method);if(!is_object($class) && !class_exists($class)){Eden_Route_Error::i()->setMessage(Eden_Route_Error::CLASS_NOT_EXISTS)->addVariable($class)->addVariable($method)->trigger();}if(!$isClassRoute && !$isMethodRoute && !method_exists($class,$method)){Eden_Route_Error::i()->setMessage(Eden_Route_Error::METHOD_NOT_EXISTS)->addVariable($class)->addVariable($method)->trigger();}if(is_object($class)){$class=get_class($class);}return call_user_func_array($class.'::'.$method,$args);}public function getRoute($class,$method){Eden_Route_Error::i()->argument(1,'string')->argument(2,'string');if($this->isRoute(NULL,$method)){return $this->_route[NULL][strtolower($method)];}$class=Eden_Route_Class::i()->getRoute($class);if($this->isRoute($class,$method)){return $this->_route[strtolower($class)][strtolower($method)];}return array($class,$method);}public function getRoutes(){return $this->_route;}public function isRoute($class,$method){if(is_string($class)){$class=strtolower($class);}return isset($this->_route[$class][strtolower($method)]);}public function release($class,$method){if($this->isRoute($class,$method)){unset($this->_route[strtolower($class)][strtolower($method)]);}return $this;}public function route($source,$alias,$class,$method=NULL){Eden_Route_Error::i()->argument(1,'string','object','null')->argument(2,'string')->argument(3,'string','object')->argument(4,'string');if(is_object($source)){$source=get_class($source);}if(!is_string($method)){$method=$alias;}$route=Eden_Route_Class::i();if(!is_null($source)){$source=$route->getRoute($source);$source=strtolower($source);}if(is_string($class)){$class=$route->getRoute($class);}$this->_route[$source][strtolower($alias)]=array($class,$method);return $this;}}}
/* Eden_Route_Function */
if(!class_exists('Eden_Route_Function')){class Eden_Route_Function extends Eden_Class{protected static $_instance=NULL;protected $_route=array();public static function i(){$class=__CLASS__;if(is_null(self::$_instance)){self::$_instance=new $class();}return self::$_instance;}public function call($function){Eden_Route_Error::i()->argument(1,'string');$args=func_get_args();$function=array_shift($args);return $this->callArray($function,$args);}public function callArray($function,array $args=array()){Eden_Route_Error::i()->argument(1,'string');$function=$this->getRoute($function);return call_user_func_array($function,$args);}public function getRoute($route){Eden_Route_Error::i()->argument(1,'string');if($this->isRoute($route)){return $this->_route[strtolower($route)];}return $route;}public function getRoutes(){return $this->_route;}public function isRoute($route){return isset($this->_route[strtolower($route)]);}public function release($route){if($this->isRoute($route)){unset($this->_route[strtolower($route)]);}return $this;}public function route($route,$function){Eden_Route_Error::i()->argument(1,'string')->argument(2,'string');$function=$this->getRoute($function);$this->_route[strtolower($route)]=$function;return $this;}}}
/* Eden_Route */
if(!class_exists('Eden_Route')){class Eden_Route extends Eden_Class{protected static $_instance=NULL;public static function i(){$class=__CLASS__;if(is_null(self::$_instance)){self::$_instance=new $class();}return self::$_instance;}public function getClass($class=NULL,array $args=array()){$route=Eden_Route_Class::i();if(is_null($class)){return $route;}return $route->callArray($class,$args);}public function getFunction($function=NULL,array $args=array()){$route=Eden_Route_Function::i();if(is_null($function)){return $route;}return $route->callArray($function,$args);}public function getMethod($class=NULL,$method=NULL,array $args=array()){$route=Eden_Route_Method::i();if(is_null($class) || is_null($method)){return $route;}return $route->call($class,$method,$args);}}}
/* Eden_When */
if(!class_exists('Eden_When')){class Eden_When extends Eden_Class implements ArrayAccess,Iterator{protected $_scope=NULL;protected $_increment=1;protected $_lines=0;public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($scope,$lines=0){$this->_scope=$scope;$this->_lines=$lines;}public function __call($name,$args){if($this->_lines > 0 && $this->_increment==$this->_lines){return $this->_scope;}$this->_increment++;return $this;}public function current(){return $this->_scope->current();}public function key(){return $this->_scope->key();}public function next(){$this->_scope->next();}public function offsetExists($offset){return $this->_scope->offsetExists($offset);}public function offsetGet($offset){return $this->_scope->offsetGet($offset);}public function offsetSet($offset,$value){}public function offsetUnset($offset){}public function rewind(){$this->_scope->rewind();}public function valid(){return $this->_scope->valid();}}}
/* Eden_Debug */
if(!class_exists('Eden_Debug')){class Eden_Debug extends Eden_Class{protected $_scope=NULL;protected $_name=NULL;public static function i(){return self::_getSingleton(__CLASS__);}public function __call($name,$args){if(is_null($this->_scope)){return parent::__call($name,$args);}$results=$this->_getResults($name,$args);$name=$this->_name;$scope=$this->_scope;$this->_name=NULL;$this->_scope=NULL;if($name){$scope->debug($name);return $results;}$class=get_class($scope);$this->output(sprintf(self::DEBUG,$class.'->'.$name))->output($results);return $results;}public function next($scope,$name=NULL){Eden_Error::i()->argument(1,'object')->argument(2,'string','null');$this->_scope=$scope;$this->_name=$name;return $this;}public function output($variable){if($variable===true){$variable='*TRUE*';}else if($variable===false){$variable='*FALSE*';}else if(is_null($variable)){$variable='*NULL*';}echo '<pre>'.print_r($variable,true).'</pre>';return $this;}protected function _getResults($name,$args){if(method_exists($this->_scope,$name)){return call_user_func_array(array($this->_scope,$name),$args);}return $this->_scope->__call($name,$args);}}}
/* Eden_Loop */
if(!class_exists('Eden_Loop')){class Eden_Loop extends Eden_Class{protected $_scope=NULL;protected $_callback=NULL;public static function i(){return self::_getSingleton(__CLASS__);}public function __call($name,$args){if(is_null($this->_scope)){return parent::__call($name,$args);}$results=$this->_getResults($name,$args);$loopable=is_scalar($results) ? array($results) : $results;foreach($loopable as $key=>$value){call_user_func($this->_callback,$key,$value);}return $results;}public function iterate($scope,$callback){Eden_Error::i()->argument(1,'object')->argument(2,'callable');$this->_scope=$scope;$this->_callback=$callback;return $this;}protected function _getResults($name,$args){if(method_exists($this->_scope,$name)){return call_user_func_array(array($this->_scope,$name),$args);}return $this->_scope->__call($name,$args);}}}
/* Eden_Loader */
if(!class_exists('Eden_Loader')){class Eden_Loader extends Eden_Class{protected $_root=array();public static function i(){return self::_getSingleton(__CLASS__);}public function __construct($eden=true){if($eden){$this->addRoot(realpath(dirname(__FILE__).'/..'));}}public function __call($name,$args){if(preg_match("/^[A-Z]/",$name)){$this->load($name);}return parent::__call($name,$args);}public function addRoot($path){array_unshift($this->_root,$path);return $this;}public function handler($class){if(!is_string($class)){return false;}$path=str_replace(array('_','\\'),'/',$class);$path='/'.strtolower($path);$path=str_replace('//','/',$path);foreach($this->_root as $root){$file=$root.$path.'.php';if(file_exists($file) && require_once($file)){return true;}}return false;}public function load($class){if(!class_exists($class)){$this->handler($class);}return $this;}}}
/* Eden_Type */
if(!class_exists('Eden_Type')){class Eden_Type extends Eden_Class{public static function i($type=NULL){if(func_num_args() > 1){$type=func_get_args();}if(is_array($type)){return Eden_Type_Array::i($type);}if(is_string($type)){return Eden_Type_String::i($type);}return self::_getSingleton(__CLASS__);}public function getArray($array){$args=func_get_args();if(count($args) > 1 || !is_array($array)){$array=$args;}return Eden_Type_Array::i($array);}public function getString($string){return Eden_Type_String::i($string);}}}
/* Eden_Type_Abstract */
if(!class_exists('Eden_Type_Abstract')){abstract class Eden_Type_Abstract extends Eden_Class{const PRE='pre';const POST='post';const REFERENCE='reference';protected $_data=NULL;protected $_original=NULL;public function __call($name,$args){$type=$this->_getMethodType($name);if(!$type){try{return parent::__call($name,$args);}catch(Eden_Error $e){Eden_Type_Error::i($e->getMessage())->trigger();}}switch($type){case self::PRE: array_unshift($args,$this->_data);break;case self::POST: array_push($args,$this->_data);break;case self::REFERENCE: call_user_func_array($name,array_merge(array(&$this->_data),$args));return $this;}$result=call_user_func_array($name,$args);if(is_string($result)){if($this instanceof Eden_Type_String){$this->_data=$result;return $this;}return Eden_Type_String::i($result);}if(is_array($result)){if($this instanceof Eden_Type_Array){$this->_data=$result;return $this;}return Eden_Type_Array::i($result);}return $result;}public function __construct($data){$this->_original=$this->_data=$data;}public function get($modified=true){Eden_Type_Error::i()->argument(1,'bool');return $modified ? $this->_data : $this->_original;}public function revert(){$this->_data=$this->_original;return $this;}public function set($value){$this->_data=$value;return $this;}abstract protected function _getMethodType(&$name);}}
/* Eden_Type_Error */
if(!class_exists('Eden_Type_Error')){class Eden_Type_Error extends Eden_Error{public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Type_Array */
if(!class_exists('Eden_Type_Array')){class Eden_Type_Array extends Eden_Type_Abstract implements ArrayAccess,Iterator,Serializable,Countable{protected $_data=array();protected $_original=array();protected static $_methods=array( 'array_change_key_case'=>self::PRE,'array_chunk'=>self::PRE,'array_combine'=>self::PRE,'array_count_datas'=>self::PRE,'array_diff_assoc'=>self::PRE,'array_diff_key'=>self::PRE,'array_diff_uassoc'=>self::PRE,'array_diff_ukey'=>self::PRE,'array_diff'=>self::PRE,'array_fill_keys'=>self::PRE,'array_filter'=>self::PRE,'array_flip'=>self::PRE,'array_intersect_assoc'=>self::PRE,'array_intersect_key'=>self::PRE,'array_intersect_uassoc'=>self::PRE,'array_intersect_ukey'=>self::PRE,'array_intersect'=>self::PRE,'array_keys'=>self::PRE,'array_merge_recursive'=>self::PRE,'array_merge'=>self::PRE,'array_pad'=>self::PRE,'array_reverse'=>self::PRE,'array_shift'=>self::PRE,'array_slice'=>self::PRE,'array_splice'=>self::PRE,'array_sum'=>self::PRE,'array_udiff_assoc'=>self::PRE,'array_udiff_uassoc'=>self::PRE,'array_udiff'=>self::PRE,'array_uintersect_assoc'=>self::PRE,'array_uintersect_uassoc'=>self::PRE,'array_uintersect'=>self::PRE,'array_unique'=>self::PRE,'array_datas'=>self::PRE,'count'=>self::PRE,'current'=>self::PRE,'each'=>self::PRE,'end'=>self::PRE,'extract'=>self::PRE,'key'=>self::PRE,'next'=>self::PRE,'prev'=>self::PRE,'sizeof'=>self::PRE,'array_fill'=>self::POST,'array_map'=>self::POST,'array_search'=>self::POST,'compact'=>self::POST,'implode'=>self::POST,'in_array'=>self::POST,'array_unshift'=>self::REFERENCE,'array_walk_recursive'=>self::REFERENCE,'array_walk'=>self::REFERENCE,'arsort'=>self::REFERENCE,'asort'=>self::REFERENCE,'krsort'=>self::REFERENCE,'ksort'=>self::REFERENCE,'natcasesort'=>self::REFERENCE,'natsort'=>self::REFERENCE,'reset'=>self::REFERENCE,'rsort'=>self::REFERENCE,'shuffle'=>self::REFERENCE,'sort'=>self::REFERENCE,'uasort'=>self::REFERENCE,'uksort'=>self::REFERENCE,'usort'=>self::REFERENCE,'array_push'=>self::REFERENCE);public static function i(){return self::_getMultiple(__CLASS__);}public function __call($name,$args){if(strpos($name,'get')===0){$separator='_';if(isset($args[0]) && is_scalar($args[0])){$separator=(string) $args[0];}$key=preg_replace("/([A-Z0-9])/",$separator."$1",$name);$key=strtolower(substr($key,3+strlen($separator)));if(isset($this->_data[$key])){return $this->_data[$key];}return NULL;}else if (strpos($name,'set')===0){$separator='_';if(isset($args[1]) && is_scalar($args[1])){$separator=(string) $args[1];}$key=preg_replace("/([A-Z0-9])/",$separator."$1",$name);$key=strtolower(substr($key,3+strlen($separator)));$this->__set($key,isset($args[0]) ? $args[0] : NULL);return $this;}try{return parent::__call($name,$args);}catch(Eden_Error $e){Eden_Type_Error::i($e->getMessage())->trigger();}}public function __construct($data=array()){if(func_num_args() > 1 || !is_array($data)){$data=func_get_args();}parent::__construct($data);}public function __set($name,$value){$this->_data[$name]=$value;}public function __toString(){return json_encode($this->get());}public function copy($source,$destination){$this->_data[$destination]=$this->_data[$source];return $this;}public function count(){return count($this->_data);}public function cut($key){Eden_Type_Error::i()->argument(1,'scalar');if(!isset($this->_data[$key])){return $this;}unset($this->_data[$key]);$this->_data=array_values($this->_data);return $this;}public function current(){return current($this->_data);}public function each($callback){Eden_Error::i()->argument(1,'callable');foreach($this->_data as $key=>$value){call_user_func($callback,$key,$value);}return $this;}public function isEmpty(){return empty($this->_data);}public function key(){return key($this->_data);}public function next(){next($this->_data);}public function offsetExists($offset){return isset($this->_data[$offset]);}public function offsetGet($offset){return isset($this->_data[$offset]) ? $this->_data[$offset] : NULL;}public function offsetSet($offset,$value){if (is_null($offset)){$this->_data[]=$value;}else{$this->_data[$offset]=$value;}}public function offsetUnset($offset){unset($this->_data[$offset]);}public function paste($after,$value,$key=NULL){Eden_Type_Error::i()->argument(1,'scalar')->argument(3,'scalar','null');$list=array();foreach($this->_data as $i=>$val){$list[$i]=$val;if($after !=$i){continue;}if(!is_null($key)){$list[$key]=$value;continue;}$list[]=$arrayValue;}if(is_null($key)){$list=array_values($list);}$this->_data=$list;return $this;}public function rewind(){reset($this->_data);}public function serialize(){return json_encode($this->_data);}public function set($value){Eden_Type_Error::i()->argument(1,'array');$this->_data=$value;return $this;}public function unserialize($data){$this->_data=json_decode($data,true);return $this;}public function valid(){return isset($this->_data[$this->key()]);}protected function _getMethodType(&$name){if(isset(self::$_methods[$name])){return self::$_methods[$name];}if(isset(self::$_methods['array_'.$name])){$name='array_'.$name;return self::$_methods[$name];}$uncamel=strtolower(preg_replace("/([A-Z])/","_$1",$name));if(isset(self::$_methods[$uncamel])){$name=$uncamel;return self::$_methods[$name];}if(isset(self::$_methods['array_'.$uncamel])){$name='array_'.$uncamel;return self::$_methods[$name];}return false;}}}
/* Eden_Type_String */
if(!class_exists('Eden_Type_String')){class Eden_Type_String extends Eden_Type_Abstract{protected static $_methods=array( 'addslashes'=>self::PRE,'bin2hex'=>self::PRE,'chunk_split'=>self::PRE,'convert_uudecode'=>self::PRE,'convert_uuencode'=>self::PRE,'crypt'=>self::PRE,'html_entity_decode'=>self::PRE,'htmlentities'=>self::PRE,'htmlspecialchars_decode'=>self::PRE,'htmlspecialchars'=>self::PRE,'lcfirst'=>self::PRE,'ltrim'=>self::PRE,'md5'=>self::PRE,'nl2br'=>self::PRE,'quoted_printable_decode'=>self::PRE,'quoted_printable_encode'=>self::PRE,'quotemeta'=>self::PRE,'rtrim'=>self::PRE,'sha1'=>self::PRE,'sprintf'=>self::PRE,'str_pad'=>self::PRE,'str_repeat'=>self::PRE,'str_rot13'=>self::PRE,'str_shuffle'=>self::PRE,'strip_tags'=>self::PRE,'stripcslashes'=>self::PRE,'stripslashes'=>self::PRE,'strpbrk'=>self::PRE,'stristr'=>self::PRE,'strrev'=>self::PRE,'strstr'=>self::PRE,'strtok'=>self::PRE,'strtolower'=>self::PRE,'strtoupper'=>self::PRE,'strtr'=>self::PRE,'substr_replace'=>self::PRE,'substr'=>self::PRE,'trim'=>self::PRE,'ucfirst'=>self::PRE,'ucwords'=>self::PRE,'vsprintf'=>self::PRE,'wordwrap'=>self::PRE,'count_chars'=>self::PRE,'hex2bin'=>self::PRE,'strlen'=>self::PRE,'strpos'=>self::PRE,'substr_compare'=>self::PRE,'substr_count'=>self::PRE,'str_ireplace'=>self::POST,'str_replace'=>self::POST,'preg_replace'=>self::POST,'explode'=>self::POST);public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($data){Eden_Type_Error::i()->argument(1,'scalar');$data=(string) $data;parent::__construct($data);}public function __toString(){return $this->_data;}public function camelize($prefix='-'){Eden_Type_Error::i()->argument(1,'string');$this->_data=str_replace($prefix,' ',$this->_data);$this->_data=str_replace(' ','',ucwords($this->_data));$this->_data=strtolower(substr($name,0,1)).substr($name,1);return $this;}public function dasherize(){$this->_data=preg_replace("/[^a-zA-Z0-9_-\s]/i",'',$this->_data);$this->_data=str_replace(' ','-',trim($this->_data));$this->_data=preg_replace("/-+/i",'-',$this->_data);$this->_data=strtolower($this->_data);return $this;}public function titlize($prefix='-'){Eden_Type_Error::i()->argument(1,'string');$this->_data=ucwords(str_replace($prefix,' ',$this->_data));return $this;}public function uncamelize($prefix='-'){Eden_Type_Error::i()->argument(1,'string');$this->_data=strtolower(preg_replace("/([A-Z])/",$prefix."$1",$this->_data));return $this;}public function summarize($words){Eden_Type_Error::i()->argument(1,'int');$this->_data=explode(' ',strip_tags($this->_data),$words);array_pop($this->_data);$this->_data=implode(' ',$this->_data);return $this;}protected function _getMethodType(&$name){if(isset(self::$_methods[$name])){return self::$_methods[$name];}if(isset(self::$_methods['str_'.$name])){$name='str_'.$name;return self::$_methods[$name];}$uncamel=strtolower(preg_replace("/([A-Z])/","_$1",$name));if(isset(self::$_methods[$uncamel])){$name=$uncamel;return self::$_methods[$name];}if(isset(self::$_methods['str_'.$uncamel])){$name='str_'.$uncamel;return self::$_methods[$name];}return false;}}}
/* Eden_Collection */
if(!class_exists('Eden_Collection')){class Eden_Collection extends Eden_Class implements ArrayAccess,Iterator,Serializable,Countable{const FIRST='first';const LAST='last';const MODEL='Eden_Model';protected $_list=array();protected $_model=self::MODEL;public static function i(){return self::_getMultiple(__CLASS__);}public function __call($name,$args){if(strpos($name,'get')===0){$value=isset($args[0]) ? $args[0] : NULL;$list=Eden_Model::i();foreach($this->_list as $i=>$row){$list[]=$row->$name(isset($args[0]) ? $args[0] : NULL);}return $list;}else if (strpos($name,'set')===0){$value=isset($args[0]) ? $args[0] : NULL;$separator=isset($args[1]) ? $args[1] : NULL;foreach($this->_list as $i=>$row){$row->$name($value,$separator);}return $this;}$found=false;foreach($this->_list as $i=>$row){if(!method_exists($row,$name)){continue;}$found=true;$row->callThis($name,$args);}if($found){return $this;}try{return parent::__call($name,$args);}catch(Eden_Error $e){Eden_Collection_Error::i($e->getMessage())->trigger();}}public function __construct(array $data=array()){$this->set($data);}public function __set($name,$value){foreach($this->_list as $i=>$row){$row[$name]=$value;}return $this;}public function __toString(){return json_encode($this->get());}public function add($row=array()){Eden_Collection_Error::i()->argument(1,'array',$this->_model);if(is_array($row)){$model=$this->_model;$row=$this->$model($row);}$this->_list[]=$row;return $this;}public function count(){return count($this->_list);}public function cut($index=self::LAST){Eden_Collection_Error::i()->argument(1,'string','int');if($index==self::FIRST){$index=0;}else if($index==self::LAST){$index=count($this->_list) -1;}if(isset($this->_list[$index])){unset($this->_list[$index]);}$this->_list=array_values($this->_list);return $this;}public function each($callback){Eden_Error::i()->argument(1,'callable');foreach($this->_list as $key=>$value){call_user_func($callback,$key,$value);}return $this;}public function current(){return current($this->_list);}public function get($modified=true){Eden_Collection_Error::i()->argument(1,'bool');$array=array();foreach($this->_list as $i=>$row){$array[$i]=$row->get($modified);}return $array;}public function key(){return key($this->_list);}public function next(){next($this->_list);}public function offsetExists($offset){return isset($this->_list[$offset]);}public function offsetGet($offset){return isset($this->_list[$offset]) ? $this->_list[$offset] : NULL;}public function offsetSet($offset,$value){Eden_Collection_Error::i()->argument(2,'array',$this->_model);if(is_array($value)){$model=$this->_model;$value=$this->$model($value);}if (is_null($offset)){$this->_list[]=$value;}else{$this->_list[$offset]=$value;}}public function offsetUnset($offset){$this->_list=Eden_Model::i($this->_list)->cut($offset)->get();}public function rewind(){reset($this->_list);}public function serialize(){return $this->__toString();}public function set(array $data=array()){foreach($data as $row){$this->add($row);}return $this;}public function setModel($model){$error=Eden_Collection_Error::i()->argument(1,'string');if(!is_subclass_of($model,'Eden_Model')){$error->setMessage(Eden_Collection_Error::NOT_SUB_MODEL)->addVariable($model)->trigger();}$this->_model=$model;return $this;}public function unserialize($data){$this->_list=json_decode($data,true);return $this;}public function valid(){return isset($this->_list[key($this->_list)]);}}class Eden_Collection_Error extends Eden_Error{const NOT_COLLECTION='The data passed into __construct is not a collection.';const NOT_SUB_MODEL='Class %s is not a child of Eden_Model';public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Curl */
if(!class_exists('Eden_Curl')){class Eden_Curl extends Eden_Class implements ArrayAccess{const PUT='PUT';const DELETE='DELETE';const GET='GET';const POST='POST';protected $_options=array();protected $_meta=array();protected $_query=array();protected $_headers=array();protected static $_setBoolKeys=array( 'AutoReferer'=>CURLOPT_AUTOREFERER,'BinaryTransfer'=>CURLOPT_BINARYTRANSFER,'CookieSession'=>CURLOPT_COOKIESESSION,'CrlF'=>CURLOPT_CRLF,'DnsUseGlobalCache'=>CURLOPT_DNS_USE_GLOBAL_CACHE,'FailOnError'=>CURLOPT_FAILONERROR,'FileTime'=>CURLOPT_FILETIME,'FollowLocation'=>CURLOPT_FOLLOWLOCATION,'ForbidReuse'=>CURLOPT_FORBID_REUSE,'FreshConnect'=>CURLOPT_FRESH_CONNECT,'FtpUseEprt'=>CURLOPT_FTP_USE_EPRT,'FtpUseEpsv'=>CURLOPT_FTP_USE_EPSV,'FtpAppend'=>CURLOPT_FTPAPPEND,'FtpListOnly'=>CURLOPT_FTPLISTONLY,'Header'=>CURLOPT_HEADER,'HeaderOut'=>CURLINFO_HEADER_OUT,'HttpGet'=>CURLOPT_HTTPGET,'HttpProxyTunnel'=>CURLOPT_HTTPPROXYTUNNEL,'Netrc'=>CURLOPT_NETRC,'Nobody'=>CURLOPT_NOBODY,'NoProgress'=>CURLOPT_NOPROGRESS,'NoSignal'=>CURLOPT_NOSIGNAL,'Post'=>CURLOPT_POST,'Put'=>CURLOPT_PUT,'ReturnTransfer'=>CURLOPT_RETURNTRANSFER,'SslVerifyPeer'=>CURLOPT_SSL_VERIFYPEER,'TransferText'=>CURLOPT_TRANSFERTEXT,'UnrestrictedAuth'=>CURLOPT_UNRESTRICTED_AUTH,'Upload'=>CURLOPT_UPLOAD,'Verbose'=>CURLOPT_VERBOSE);protected static $_setIntegerKeys=array( 'BufferSize'=>CURLOPT_BUFFERSIZE,'ClosePolicy'=>CURLOPT_CLOSEPOLICY,'ConnectTimeout'=>CURLOPT_CONNECTTIMEOUT,'ConnectTimeoutMs'=>CURLOPT_CONNECTTIMEOUT_MS,'DnsCacheTimeout'=>CURLOPT_DNS_CACHE_TIMEOUT,'FtpSslAuth'=>CURLOPT_FTPSSLAUTH,'HttpVersion'=>CURLOPT_HTTP_VERSION,'HttpAuth'=>CURLOPT_HTTPAUTH,'InFileSize'=>CURLOPT_INFILESIZE,'LowSpeedLimit'=>CURLOPT_LOW_SPEED_LIMIT,'LowSpeedTime'=>CURLOPT_LOW_SPEED_TIME,'MaxConnects'=>CURLOPT_MAXCONNECTS,'MaxRedirs'=>CURLOPT_MAXREDIRS,'Port'=>CURLOPT_PORT,'ProxyAuth'=>CURLOPT_PROXYAUTH,'ProxyPort'=>CURLOPT_PROXYPORT,'ProxyType'=>CURLOPT_PROXYTYPE,'ResumeFrom'=>CURLOPT_RESUME_FROM,'SslVerifyHost'=>CURLOPT_SSL_VERIFYHOST,'SslVersion'=>CURLOPT_SSLVERSION,'TimeCondition'=>CURLOPT_TIMECONDITION,'Timeout'=>CURLOPT_TIMEOUT,'TimeoutMs'=>CURLOPT_TIMEOUT_MS,'TimeValue'=>CURLOPT_TIMEVALUE);protected static $_setStringKeys=array( 'CaInfo'=>CURLOPT_CAINFO,'CaPath'=>CURLOPT_CAPATH,'Cookie'=>CURLOPT_COOKIE,'CookieFile'=>CURLOPT_COOKIEFILE,'CookieJar'=>CURLOPT_COOKIEJAR,'CustomRequest'=>CURLOPT_CUSTOMREQUEST,'EgdSocket'=>CURLOPT_EGDSOCKET,'Encoding'=>CURLOPT_ENCODING,'FtpPort'=>CURLOPT_FTPPORT,'Interface'=>CURLOPT_INTERFACE,'Krb4Level'=>CURLOPT_KRB4LEVEL,'PostFields'=>CURLOPT_POSTFIELDS,'Proxy'=>CURLOPT_PROXY,'ProxyUserPwd'=>CURLOPT_PROXYUSERPWD,'RandomFile'=>CURLOPT_RANDOM_FILE,'Range'=>CURLOPT_RANGE,'Referer'=>CURLOPT_REFERER,'SslCipherList'=>CURLOPT_SSL_CIPHER_LIST,'SslCert'=>CURLOPT_SSLCERT,'SslCertPassword'=>CURLOPT_SSLCERTPASSWD,'SslCertType'=>CURLOPT_SSLCERTTYPE,'SslEngine'=>CURLOPT_SSLENGINE,'SslEngineDefault'=>CURLOPT_SSLENGINE_DEFAULT,'Sslkey'=>CURLOPT_SSLKEY,'SslKeyPasswd'=>CURLOPT_SSLKEYPASSWD,'SslKeyType'=>CURLOPT_SSLKEYTYPE,'Url'=>CURLOPT_URL,'UserAgent'=>CURLOPT_USERAGENT,'UserPwd'=>CURLOPT_USERPWD);protected static $_setArrayKeys=array( 'Http200Aliases'=>CURLOPT_HTTP200ALIASES,'HttpHeader'=>CURLOPT_HTTPHEADER,'PostQuote'=>CURLOPT_POSTQUOTE,'Quote'=>CURLOPT_QUOTE);protected static $_setFileKeys=array( 'File'=>CURLOPT_FILE,'InFile'=>CURLOPT_INFILE,'StdErr'=>CURLOPT_STDERR,'WriteHeader'=>CURLOPT_WRITEHEADER);protected static $_setCallbackKeys=array( 'HeaderFunction'=>CURLOPT_HEADERFUNCTION,'ReadFunction'=>CURLOPT_READFUNCTION,'WriteFunction'=>CURLOPT_WRITEFUNCTION);public static function i(){return self::_getMultiple(__CLASS__);}public function __call($name,$args){if(strpos($name,'set')===0){$method=substr($name,3);if(isset(self::$_setBoolKeys[$method])){Eden_Curl_Error::i()->vargument($name,$args,1,'bool');$key=self::$_setBoolKeys[$method];$this->_options[$key]=$args[0];return $this;}if(isset(self::$_setIntegerKeys[$method])){Eden_Curl_Error::i()->vargument($name,$args,1,'int');$key=self::$_setIntegerKeys[$method];$this->_options[$key]=$args[0];return $this;}if(isset(self::$_setStringKeys[$method])){Eden_Curl_Error::i()->vargument($name,$args,1,'string');$key=self::$_setStringKeys[$method];$this->_options[$key]=$args[0];return $this;}if(isset(self::$_setArrayKeys[$method])){Eden_Curl_Error::i()->vargument($name,$args,1,'array');$key=self::$_setArrayKeys[$method];$this->_options[$key]=$args[0];return $this;}if(isset(self::$_setFileKeys[$method])){$key=self::$_setFileKeys[$method];$this->_options[$key]=$args[0];return $this;}if(isset(self::$_setCallbackKeys[$method])){Eden_Curl_Error::i()->vargument($name,$args,1,'array','string');$key=self::$_setCallbackKeys[$method];$this->_options[$key]=$args[0];return $this;}}parent::__call($name,$args);}public function getDomDocumentResponse(){$this->_meta['response']=$this->getResponse();$xml=new DOMDocument();$xml->loadXML($this->_meta['response']);return $xml;}public function getJsonResponse($assoc=true){$this->_meta['response']=$this->getResponse();Eden_Curl_Error::i()->argument(1,'bool');return json_decode($this->_meta['response'],$assoc);}public function getMeta($key=NULL){Eden_Curl_Error::i()->argument(1,'string','null');if(isset($this->_meta[$key])){return $this->_meta[$key];}return $this->_meta;}public function getQueryResponse(){$this->_meta['response']=$this->getResponse();parse_str($this->_meta['response'],$response);return $response;}public function getResponse(){$curl=curl_init();$this->_addParameters()->_addHeaders();$this->_options[CURLOPT_RETURNTRANSFER]=true;curl_setopt_array($curl,$this->_options);$response=curl_exec($curl);$this->_meta=array( 'info'=>curl_getinfo($curl,CURLINFO_HTTP_CODE),'error_message'=>curl_errno($curl),'error_code'=>curl_error($curl));curl_close($curl);unset($curl);return $response;}public function getSimpleXmlResponse(){$this->_meta['response']=$this->getResponse();return simplexml_load_string($this->_meta['response']);}public function offsetExists($offset){return isset($this->_option[$offset]);}public function offsetGet($offset){return isset($this->_option[$offset]) ? $this->_option[$offset] : NULL;}public function offsetSet($offset,$value){if (!is_null($offset)){if(in_array($offset,$this->_setBoolKeys)){$method=array_search($offset,$this->_setBoolKeys);$this->_call('set'.$method,array($value));}if(in_array($offset,$this->_setIntegerKeys)){$method=array_search($offset,$this->_setIntegerKeys);$this->_call('set'.$method,array($value));}if(in_array($offset,$this->_setStringKeys)){$method=array_search($offset,$this->_setStringKeys);$this->_call('set'.$method,array($value));}if(in_array($offset,$this->_setArrayKeys)){$method=array_search($offset,$this->_setArrayKeys);$this->_call('set'.$method,array($value));}if(in_array($offset,$this->_setFileKeys)){$method=array_search($offset,$this->_setFileKeys);$this->_call('set'.$method,array($value));}if(in_array($offset,$this->_setCallbackKeys)){$method=array_search($offset,$this->_setCallbackKeys);$this->_call('set'.$method,array($value));}}}public function offsetUnset($offset){unset($this->_option[$offset]);}public function send(){$curl=curl_init();$this->_addParameters()->_addHeaders();curl_setopt_array($curl,$this->_options);curl_exec($curl);$this->_meta=array( 'info'=>curl_getinfo($curl,CURLINFO_HTTP_CODE),'error_message'=>curl_errno($curl),'error_code'=>curl_error($curl));curl_close($curl);unset($curl);return $this;}public function setCustomGet(){$this->setCustomRequest(self::GET);return $this;}public function setCustomPost(){$this->setCustomRequest(self::POST);return $this;}public function setCustomPut(){$this->setCustomRequest(self::PUT);return $this;}public function setCustomDelete(){$this->setCustomRequest(self::DELETE);return $this;}public function setPostFields($fields){Eden_Curl_Error::i()->argument(1,'array','string');$this->_options[CURLOPT_POSTFIELDS]=$fields;return $this;}public function setHeaders($key,$value=NULL){Eden_Curl_Error::i()->argument(1,'array','string')->argument(2,'scalar','null');if(is_array($key)){$this->_headers=$key;return $this;}$this->_headers[]=$key.': '.$value;return $this;}public function setUrlParameter($key,$value=NULL){Eden_Curl_Error::i()->argument(1,'array','string')->argument(2,'scalar');if(is_array($key)){$this->_param=$key;return $this;}$this->_param[$key]=$value;}public function verifyHost($on=true){Eden_Curl_Error::i()->argument(1,'bool');$this->_options[CURLOPT_SSL_VERIFYHOST]=$on ? 1 : 2;return $this;}public function verifyPeer($on=true){Eden_Curl_Error::i()->argument(1,'bool');$this->_options[CURLOPT_SSL_VERIFYPEER]=$on;return $this;}protected function _addHeaders(){if(empty($this->_headers)){return $this;}$this->_options[CURLOPT_HTTPHEADER]=$this->_headers;return $this;}protected function _addParameters(){if(empty($this->_params)){return $this;}$params=http_build_query($this->_params);if($this->_options[CURLOPT_POST]){$this->_options[CURLOPT_POSTFIELDS]=$params;return $this;}if(strpos($this->_options[CURLOPT_URL],'?')===false){$params='?'.$params;}else if(substr($this->_options[CURLOPT_URL],-1,1) !='?'){$params='&'.$params;}$this->_options[CURLOPT_URL].=$params;return $this;}}class Eden_Curl_Error extends Eden_Error{public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Path */
if(!class_exists('Eden_Path')){class Eden_Path extends Eden_Type_String implements ArrayAccess{public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($path){Eden_Path_Error::i()->argument(1,'string');parent::__construct($this->_format($path));}public function __toString(){return $this->_data;}public function absolute($root=NULL){Eden_Path_Error::i()->argument(1,'string','null');if(is_dir($this->_data) || is_file($this->_data)){return $this;}if(is_null($root)){$root=$_SERVER['DOCUMENT_ROOT'];}$absolute=$this->_format($root).$this->_data;if(is_dir($absolute) || is_file($absolute)){$this->_data=$absolute;return $this;}Eden_Path_Error::i()->setMessage(Eden_Path_Error::FULL_PATH_NOT_FOUND)->addVariable($this->_data)->addVariable($absolute)->trigger();}public function append($path){$error=Eden_Path_Error::i()->argument(1,'string');$paths=func_get_args();foreach($paths as $i=>$path){$error->argument($i + 1,$path,'string');$this->_data.=$this->_format($path);}return $this;}public function getArray(){return explode('/',$this->_data);}public function offsetExists($offset){return in_array($offset,$this->getArray());}public function offsetGet($offset){$pathArray=$this->getArray();if($offset=='first'){$offset=0;}if($offset=='last'){$offset=count($pathArray) - 1;}if(is_numeric($offset)){return isset($pathArray[$offset]) ? $pathArray[$offset] : NULL;}return NULL;}public function offsetSet($offset,$value){if (is_null($offset)){$this->append($value);}else if($offset=='prepend'){$this->prepend($value);}else if($offset=='replace'){$this->replace($value);}else{$pathArray=$this->getArray();if($offset > 0 && $offset < count($pathArray)){$pathArray[$offset]=$value;$this->_data=implode('/',$pathArray);}}}public function offsetUnset($offset){}public function prepend($path){$error=Eden_Path_Error::i()->argument(1,'string');$paths=func_get_args();foreach($paths as $i=>$path){$error->argument($i + 1,$path,'string');$this->_data=$this->_format($path).$this->_data;}return $this;}public function pop(){$pathArray=$this->getArray();$path=array_pop($pathArray);$this->_data=implode('/',$pathArray);return $path;}public function replace($path){Eden_Path_Error::i()->argument(1,'string');$pathArray=$this->getArray();array_pop($pathArray);$pathArray[]=$path;$this->_data=implode('/',$pathArray);return $this;}protected function _format($path){$path=str_replace('\\','/',$path);$path=str_replace('//','/',$path);if(substr($path,-1,1)=='/'){$path=substr($path,0,-1);}if(substr($path,0,1) !='/' && !preg_match("/^[A-Za-z]+\:/",$path)){$path='/'.$path;}return $path;}}class Eden_Path_Error extends Eden_Error{const FULL_PATH_NOT_FOUND='The path %s or %s was not found.';public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_File */
if(!class_exists('Eden_File')){class Eden_File extends Eden_Path{protected $_path=NULL;public static function i(){return self::_getMultiple(__CLASS__);}public function isFile(){return file_exists($this->_data);}public function getBase(){$pathInfo=pathinfo($this->_data);return $pathInfo['filename'];}public function getContent(){$this->absolute();if(!is_file($this->_data)){Eden_File_Error::i()->setMessage(Eden_File_Error::PATH_IS_NOT_FILE)->addVariable($this->_data)->trigger();}return file_get_contents($this->_data);}public function getData(){$this->absolute();return include($this->_data);}public function getExtension(){$pathInfo=pathinfo($this->_data);if(!isset($pathInfo['extension'])){return NULL;}return $pathInfo['extension'];}public function getFolder(){return dirname($this->_data);}public function getMime(){$this->absolute();if(function_exists('mime_content_type')){return mime_content_type($this->_data);}if(function_exists('finfo_open')){$resource=finfo_open(FILEINFO_MIME_TYPE);$mime=finfo_file($resource,$this->_data);finfo_close($finfo);return $mime;}$extension=strtolower($this->getExtension());$types=self::$_mimeTypes;if(isset($types[$extension])){return $types[$extension];}return $types['class'];}public function getName(){return basename($this->_data);}public function getSize(){$this->absolute();return filesize($this->_data);}public function getTime(){$this->absolute();return filemtime($this->_data);}public function setContent($content){Eden_File_Error::i()->argument(1,'string');try{$this->absolute();}catch(Eden_Path_Error $e){$this->touch();}file_put_contents($this->_data,$content);return $this;}public function setData($variable){return $this->setContent(" //-->\nreturn ".var_export($variable,true).";");}public function remove(){$this->absolute();if(is_file($this->_data)){unlink($this->_data);return $this;}return $this;}public function touch(){touch($this->_data);return $this;}protected static $_mimeTypes=array( 'ai'=>'application/postscript','aif'=>'audio/x-aiff','aifc'=>'audio/x-aiff','aiff'=>'audio/x-aiff','asc'=>'text/plain','atom'=>'application/atom+xml','au'=>'audio/basic','avi'=>'video/x-msvideo','bcpio'=>'application/x-bcpio','bin'=>'application/octet-stream','bmp'=>'image/bmp','cdf'=>'application/x-netcdf','cgm'=>'image/cgm','class'=>'application/octet-stream','cpio'=>'application/x-cpio','cpt'=>'application/mac-compactpro','csh'=>'application/x-csh','css'=>'text/css','dcr'=>'application/x-director','dif'=>'video/x-dv','dir'=>'application/x-director','djv'=>'image/vnd.djvu','djvu'=>'image/vnd.djvu','dll'=>'application/octet-stream','dmg'=>'application/octet-stream','dms'=>'application/octet-stream','doc'=>'application/msword','dtd'=>'application/xml-dtd','dv'=>'video/x-dv','dvi'=>'application/x-dvi','dxr'=>'application/x-director','eps'=>'application/postscript','etx'=>'text/x-setext','exe'=>'application/octet-stream','ez'=>'application/andrew-inset','gif'=>'image/gif','gram'=>'application/srgs','grxml'=>'application/srgs+xml','gtar'=>'application/x-gtar','hdf'=>'application/x-hdf','hqx'=>'application/mac-binhex40','htm'=>'text/html','html'=>'text/html','ice'=>'x-conference/x-cooltalk','ico'=>'image/x-icon','ics'=>'text/calendar','ief'=>'image/ief','ifb'=>'text/calendar','iges'=>'model/iges','igs'=>'model/iges','jnlp'=>'application/x-java-jnlp-file','jp2'=>'image/jp2','jpe'=>'image/jpeg','jpeg'=>'image/jpeg','jpg'=>'image/jpeg','js'=>'application/x-javascript','kar'=>'audio/midi','latex'=>'application/x-latex','lha'=>'application/octet-stream','lzh'=>'application/octet-stream','m3u'=>'audio/x-mpegurl','m4a'=>'audio/mp4a-latm','m4b'=>'audio/mp4a-latm','m4p'=>'audio/mp4a-latm','m4u'=>'video/vnd.mpegurl','m4v'=>'video/x-m4v','mac'=>'image/x-macpaint','man'=>'application/x-troff-man','mathml'=>'application/mathml+xml','me'=>'application/x-troff-me','mesh'=>'model/mesh','mid'=>'audio/midi','midi'=>'audio/midi','mif'=>'application/vnd.mif','mov'=>'video/quicktime','movie'=>'video/x-sgi-movie','mp2'=>'audio/mpeg','mp3'=>'audio/mpeg','mp4'=>'video/mp4','mpe'=>'video/mpeg','mpeg'=>'video/mpeg','mpg'=>'video/mpeg','mpga'=>'audio/mpeg','ms'=>'application/x-troff-ms','msh'=>'model/mesh','mxu'=>'video/vnd.mpegurl','nc'=>'application/x-netcdf','oda'=>'application/oda','ogg'=>'application/ogg','pbm'=>'image/x-portable-bitmap','pct'=>'image/pict','pdb'=>'chemical/x-pdb','pdf'=>'application/pdf','pgm'=>'image/x-portable-graymap','pgn'=>'application/x-chess-pgn','pic'=>'image/pict','pict'=>'image/pict','png'=>'image/png','pnm'=>'image/x-portable-anymap','pnt'=>'image/x-macpaint','pntg'=>'image/x-macpaint','ppm'=>'image/x-portable-pixmap','ppt'=>'application/vnd.ms-powerpoint','ps'=>'application/postscript','qt'=>'video/quicktime','qti'=>'image/x-quicktime','qtif'=>'image/x-quicktime','ra'=>'audio/x-pn-realaudio','ram'=>'audio/x-pn-realaudio','ras'=>'image/x-cmu-raster','rdf'=>'application/rdf+xml','rgb'=>'image/x-rgb','rm'=>'application/vnd.rn-realmedia','roff'=>'application/x-troff','rtf'=>'text/rtf','rtx'=>'text/richtext','sgm'=>'text/sgml','sgml'=>'text/sgml','sh'=>'application/x-sh','shar'=>'application/x-shar','silo'=>'model/mesh','sit'=>'application/x-stuffit','skd'=>'application/x-koan','skm'=>'application/x-koan','skp'=>'application/x-koan','skt'=>'application/x-koan','smi'=>'application/smil','smil'=>'application/smil','snd'=>'audio/basic','so'=>'application/octet-stream','spl'=>'application/x-futuresplash','src'=>'application/x-wais-source','sv4cpio'=>'application/x-sv4cpio','sv4crc'=>'application/x-sv4crc','svg'=>'image/svg+xml','swf'=>'application/x-shockwave-flash','t'=>'application/x-troff','tar'=>'application/x-tar','tcl'=>'application/x-tcl','tex'=>'application/x-tex','texi'=>'application/x-texinfo','texinfo'=>'application/x-texinfo','tif'=>'image/tiff','tiff'=>'image/tiff','tr'=>'application/x-troff','tsv'=>'text/tab-separated-values','txt'=>'text/plain','ustar'=>'application/x-ustar','vcd'=>'application/x-cdlink','vrml'=>'model/vrml','vxml'=>'application/voicexml+xml','wav'=>'audio/x-wav','wbmp'=>'image/vnd.wap.wbmp','wbmxl'=>'application/vnd.wap.wbxml','wml'=>'text/vnd.wap.wml','wmlc'=>'application/vnd.wap.wmlc','wmls'=>'text/vnd.wap.wmlscript','wmlsc'=>'application/vnd.wap.wmlscriptc','wrl'=>'model/vrml','xbm'=>'image/x-xbitmap','xht'=>'application/xhtml+xml','xhtml'=>'application/xhtml+xml','xls'=>'application/vnd.ms-excel','xml'=>'application/xml','xpm'=>'image/x-xpixmap','xsl'=>'application/xml','xslt'=>'application/xslt+xml','xul'=>'application/vnd.mozilla.xul+xml','xwd'=>'image/x-xwindowdump','xyz'=>'chemical/x-xyz','zip'=>'application/zip');}class Eden_File_Error extends Eden_Path_Error{const PATH_IS_NOT_FILE='Path %s is not a file in the system.';public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Folder */
if(!class_exists('Eden_Folder')){class Eden_Folder extends Eden_Path{public static function i(){return self::_getMultiple(__CLASS__);}public function create($chmod=0755){if(!is_int($chmod) || $chmod < 0 || $chmod > 777){Eden_Folder_Error::i(Eden_Folder_Exception::CHMOD_IS_INVALID)->trigger();}if(!is_dir($this->_data)){mkdir($this->_data,$chmod,true);}return $this;}public function getFiles($regex=NULL,$recursive=false){$error=Eden_Folder_Error::i()->argument(1,'string','null')->argument(2,'bool');$this->absolute();$files=array();if ($handle=opendir($this->_data)){while (false !==($file=readdir($handle))){if(filetype($this->_data.'/'.$file)=='file' && (!$regex || preg_match($regex,$file))){$files[]=Eden_File::i($this->_data.'/'.$file);}else if($recursive && $file !='.' && $file !='..' && filetype($this->_data.'/'.$file)=='dir'){$subfiles=self::i($this->_data.'/'.$file);$files=array_merge($files,$subfiles->getFiles($regex,$recursive));}}closedir($handle);}return $files;}public function getFolders($regex=NULL,$recursive=false){Eden_Folder_Error::i()->argument(1,'string','null')->argument(2,'bool');$this->absolute();$folders=array();if($handle=opendir($this->_data)){while (false !==($folder=readdir($handle))){if($folder !='.' && $folder !='..' && filetype($this->_data.'/'.$folder)=='dir' && (!$regex || preg_match($regex,$folder))){$folders[]=Eden_Folder::i($this->_data.'/'.$folder);if($recursive){$subfolders=Eden_Folder::i($this->_data.'/'.$folder);$folders=array_merge($folders,$subfolders->getFolders($regex,$recursive));}}}closedir($handle);}return $folders;}public function getName(){$pathArray=$this->getArray();return array_pop($pathArray);}public function isFile(){return file_exists($this->_data);}public function isFolder($path=NULL){Eden_Folder_Error::i()->argument(1,'string','null');if(is_string($path)){return is_dir($this->_data.'/'.$path);}return is_dir($this->_data);}public function remove(){$path=$this->absolute();if(is_dir($path)){rmdir($path);}return $this;}public function removeFiles($regex=NULL){Eden_Folder_Error::i()->argument(1,'string','null');$files=$this->getFiles($regex);if(empty($files)){return $this;}foreach($files as $file){$file->remove();}return $this;}public function removeFolders($regex=NULL){Eden_Folder_Error::i()->argument(1,'string','null');$this->absolute();$folders=$this->getFolders($regex);if(empty($folders)){return $this;}foreach($folders as $folder){$folder->remove();}return $this;}public function truncate(){$this->removeFolders();$this->removeFiles();return $this;}}class Eden_Folder_Error extends Eden_Error{public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Block */
if(!class_exists('Eden_Block')){abstract class Eden_Block extends Eden_Class{protected static $_blockRoot=NULL;private static $_global=array();public function __toString(){try{return (string) $this->render();}catch(Exception $e){Eden_Error_Event::i()->exceptionHandler($e);}return '';}abstract public function getTemplate();abstract public function getVariables();public function render(){return Eden_Template::i()->set($this->getVariables())->parsePhp($this->getTemplate());}public function setBlockRoot($root){Eden_Error::i()->argument(1,'folder');self::$_blockRoot=$root;return $this;}protected function _getGlobal($value){if(in_array($value,self::$_global)){return false;}self::$_global[]=$value;return $value;}}}
/* Eden_Model */
if(!class_exists('Eden_Model')){class Eden_Model extends Eden_Type_Array{public static function i(){return self::_getMultiple(__CLASS__);}protected function _getMethodType(&$name){return false;}}class Eden_Model_Error extends Eden_Error{public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden */
if(!class_exists('Eden')){function eden(){$class=Eden::i();if(func_num_args()==0){return $class;}$args=func_get_args();return $class->__invoke($args);}class Eden extends Eden_Event{protected $_root=NULL;protected static $_active=NULL;public static function i(){return self::_getSingleton(__CLASS__);}public function __construct(){if(!self::$_active){self::$_active=$this;}$this->_root=dirname(__FILE__);}public function __call($name,$args){try{return parent::__call($name,$args);}catch(Eden_Route_Exception $e){return parent::__call('Eden_'.$name,$args);}}public function setRoot($root){Eden_Error::i()->argument(1,'string');if(!class_exists('Eden_Path')){Eden_Loader::i()->load('Eden_Path');}$this->_root=(string) Eden_Path::i($root);return $this;}public function getRoot(){return $this->_root;}public function getActiveApp(){return self::$_active;}public function setLoader(){if(!class_exists('Eden_Loader')){require_once dirname(__FILE__).'/eden/loader.php';}spl_autoload_register(array(Eden_Loader::i(),'handler'));if(!class_exists('Eden_Path')){Eden_Loader::i()->addRoot(dirname(__FILE__))->load('Eden_Path');}$paths=func_get_args();if(empty($paths)){return $this;}$paths=array_unique($paths);foreach($paths as $i=>$path){if(!is_string($path) && !is_null($path)){continue;}if($path){$path=(string) Eden_Path::i($path);}else{$path=$this->_root;}if(!is_dir($path)){$path=$this->_root.$path;}if(is_dir($path)){Eden_Loader::i()->addRoot($path);}}return $this;}public function routeClasses($routes){Eden_Error::i()->argument(1,'string','array','bool');$route=Eden_Route::i()->getClass();if($routes===true){$route->route('Cache','Eden_Cache')->route('Registry','Eden_Registry')->route('Model','Eden_Model')->route('Collection','Eden_Collection')->route('Cookie','Eden_Cookie')->route('Session','Eden_Session')->route('Template','Eden_Template')->route('Curl','Eden_Curl')->route('Event','Eden_Event')->route('Path','Eden_Path')->route('File','Eden_File')->route('Folder','Eden_Folder')->route('Image','Eden_Image')->route('Mysql','Eden_Mysql')->route('Type','Eden_Type');return $this;}if(is_string($routes)){$routes=include($routes);}foreach($routes as $alias=>$class){$route->route($alias,$class);}return $this;}public function routeMethods($routes){Eden_Error::i()->argument(1,'string','array','bool');$route=Eden_Route::i()->getMethod();if(is_bool($routes)){$route->route(NULL,'output','Eden_Debug');return $this;}if(is_string($routes)){$routes=include($routes);}foreach($routes as $method=>$routePath){if(is_string($routePath)){$routePath=array($routePath);}if(is_array($routePath) && !empty($routePath)){if(count($routePath)==1){$routePath[]=$method;}$route->route($method,$routePath[0],$routePath[1]);}}return $this;}public function startSession(){Eden_Session::i()->start();return $this;}public function setTimezone($zone){Eden_Error::i()->argument(1,'string');date_default_timezone_set($zone);return $this;}}}
/* Eden_Oauth2_Abstract */
if(!class_exists('Eden_Oauth2_Abstract')){abstract class Eden_Oauth2_Abstract extends Eden_Class{const CODE='code';const TOKEN='token';const ONLINE='online';const OFFLINE='offline';const AUTO='auto';const FORCE='force';const TYPE='Content-Type';const REQUEST='application/x-www-form-urlencoded';const RESPONSE_TYPE='response_type';const CLIENT_ID='client_id';const REDIRECT_URL='redirect_uri';const ACCESS_TYPE='access_type';const APROVAL='approval_prompt';const CLIENT_SECRET='client_secret';const GRANT_TYPE='grant_type';const AUTHORIZATION='authorization_code';protected $_client=NULL;protected $_secret=NULL;protected $_redirect=NULL;protected $_state=NULL;protected $_scope=NULL;protected $_display=NULL;protected $_requestUrl=NULL;protected $_accessUrl=NULL;protected $_responseType=self::CODE;protected $_approvalPrompt=self::AUTO;public function __construct($client,$secret,$redirect,$requestUrl,$accessUrl){Eden_Oauth2_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'url')->argument(4,'url')->argument(5,'url');$this->_client=$client;$this->_secret=$secret;$this->_redirect=$redirect;$this->_requestUrl=$requestUrl;$this->_accessUrl=$accessUrl;}public function autoApprove(){$this->_approvalPrompt=self::AUTO;return $this;}public function forceApprove(){$this->_approvalPrompt=self::FORCE;return $this;}public function setState($state){Eden_Oauth2_Error::i()->argument(1,'string');$this->_state=$state;return $this;}public function setScope($scope){Eden_Oauth2_Error::i()->argument(1,'string','array');$this->_scope=$scope;return $this;}public function setDisplay($display){Eden_Oauth2_Error::i()->argument(1,'string','array');$this->_display=$display;return $this;}public function isJson($string){Eden_Oauth2_Error::i()->argument(1,'string');json_decode($string);return (json_last_error()==JSON_ERROR_NONE);}abstract public function getLoginUrl($scope=NULL,$display=NULL);abstract public function getAccess($code);protected function _getLoginUrl($query){if(!is_null($this->_scope)){if(is_array($this->_scope)){$this->_scope=implode(' ',$this->_scope);}$query['scope']=$this->_scope;}if(!is_null($this->_state)){$query['state']=$this->_state;}if(!is_null($this->_display)){$query['display']=$this->_display;}return $this->_requestUrl.'?'.http_build_query($query);}protected function _getAccess($query,$code=NULL){if(!is_null($code)){$query[self::CODE]=$code;}$result=Eden_Curl::i()->setUrl($this->_accessUrl)->verifyHost()->verifyPeer()->setHeaders(self::TYPE,self::REQUEST)->setPostFields(http_build_query($query))->getResponse();if($this->isJson($result)){$response=json_decode($result,true);}else{parse_str($result,$response);}return $response;}}}
/* Eden_Oauth2_Error */
if(!class_exists('Eden_Oauth2_Error')){class Eden_Oauth2_Error extends Eden_Error{public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Oauth2_Client */
if(!class_exists('Eden_Oauth2_Client')){class Eden_Oauth2_Client extends Eden_Oauth2_Abstract{protected $_responseType=self::CODE;protected $_accessType=self::ONLINE;protected $_approvalPrompt=self::AUTO;protected $_grantType=self::AUTHORIZATION;public static function i(){return self::_getSingleton(__CLASS__);}public function forOffline(){$this->_accessType=self::OFFLINE;return $this;}public function forOnline(){$this->_accessType=self::ONLINE;return $this;}public function getLoginUrl($scope=NULL,$display=NULL){Eden_Oauth2_Error::i()->argument(1,'string','array','null')->argument(2,'string','array','null');if(!is_null($scope)){$this->setScope($scope);}if(!is_null($display)){$this->setDisplay($display);}$query=array( self::RESPONSE_TYPE=>$this->_responseType,self::CLIENT_ID=>$this->_client,self::REDIRECT_URL=>$this->_redirect,self::ACCESS_TYPE=>$this->_accessType,self::APROVAL=>$this->_approvalPrompt);return $this->_getLoginUrl($query);}public function getAccess($code){Eden_Oauth2_Error::i()->argument(1,'string');$query=array( self::CLIENT_ID=>$this->_client,self::CLIENT_SECRET=>$this->_secret,self::REDIRECT_URL=>$this->_redirect,self::GRANT_TYPE=>$this->_grantType);return $this->_getAccess($query,$code);}}}
/* Eden_Oauth2_Desktop */
if(!class_exists('Eden_Oauth2_Desktop')){class Eden_Oauth2_Desktop extends Eden_Oauth2_Abstract{protected $_responseType=self::CODE;protected $_grantType='authorization_code';public static function i(){return self::_getMultiple(__CLASS__);}public function getLoginUrl($scope=NULL,$display=NULL){Eden_Oauth2_Error::i()->argument(1,'string','array','null')->argument(2,'string','array','null');if(!is_null($scope)){$this->setScope($scope);}if(!is_null($display)){$this->setDisplay($display);}$query=array( self::RESPONSE_TYPE=>$this->_responseType,self::CLIENT_ID=>$this->_client,self::REDIRECT_URL=>$this->_redirect);return $this->_getLoginUrl($query);}public function getAccess($code){Eden_Oauth2_Error::i()->argument(1,'string');$query=array( self::CLIENT_ID=>$this->_client,self::CLIENT_SECRET=>$this->_secret,self::REDIRECT_URL=>$this->_redirect,self::GRANT_TYPE=>$this->_grantType);return $this->_getAccess($query,$code);}}}
/* Eden_Oauth2 */
if(!class_exists('Eden_Oauth2')){class Eden_Oauth2 extends Eden_Class{public static function i(){return self::_getSingleton(__CLASS__);}public function client($client,$secret,$redirect,$requestUrl,$accessUrl){Eden_Oauth2_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'url')->argument(4,'url')->argument(5,'url');return Eden_Oauth2_Client::i($client,$secret,$redirect,$requestUrl,$accessUrl);}public function desktop($client,$secret,$redirect,$requestUrl,$accessUrl){Eden_Oauth2_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'url')->argument(4,'url')->argument(5,'url');return Eden_Oauth2_Desktop::i($client,$secret,$redirect,$requestUrl,$accessUrl);}}}
/* Eden_Facebook */
if(!class_exists('Eden_Facebook')){class Eden_Facebook extends Eden_Class{const RSS='https://www.facebook.com/feeds/page.php?id=%s&format=rss20';const RSS_AGENT='Mozilla/5.0 (X11;U;Linux x86_64;en-US;rv:1.9.2.13) Gecko/20101206 Ubuntu/10.10 (maverick) Firefox/3.6.13';public static function i(){return self::_getSingleton(__CLASS__);}public function auth($key,$secret,$redirect){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string');return Eden_Facebook_Auth::i($key,$secret,$redirect);}public function event($token,$name,$start,$end){return Eden_Facebook_Event::i($token,$name,$start,$end);}public function fql($token){Eden_Facebook_Error::i()->argument(1,'string');return Eden_Facebook_Fql::i($token);}public function graph($token){Eden_Facebook_Error::i()->argument(1,'string');return Eden_Facebook_Graph::i($token);}public function link($token,$url){return Eden_Facebook_Link::i($token,$url);}public function post($token,$message){return Eden_Facebook_Post::i($token,$message);}public function rss($id){Eden_Facebook_Error::i()->argument(1,'int');return Eden_Curl::i()->setUrl(sprintf(self::RSS,$id))->setUserAgent(self::RSS_AGENT)->setConnectTimeout(10)->setFollowLocation(true)->setTimeout(60)->verifyPeer(false)->getSimpleXmlResponse();}public function subscribe($clientId,$secret){return Eden_Facebook_Subscribe::i($clientId,$secret);}}}
/* Eden_Facebook_Error */
if(!class_exists('Eden_Facebook_Error')){class Eden_Facebook_Error extends Eden_Error{const AUTHENTICATION_FAILED='Application authentication failed.Facebook returned %s: %s';const GRAPH_FAILED='Call to graph.facebook.com failed.Facebook returned %s: %s';const REQUIRES_AUTH='Call to %s requires authentication.Please set token first or set argument 4 in setObject() to false.';}}
/* Eden_Facebook_Auth */
if(!class_exists('Eden_Facebook_Auth')){class Eden_Facebook_Auth extends Eden_Oauth2_Client{const REQUEST_URL='https://www.facebook.com/dialog/oauth';const ACCESS_URL='https://graph.facebook.com/oauth/access_token';const USER_AGENT='facebook-php-3.1';protected $_key=NULL;protected $_secret=NULL;protected $_redirect=NULL;public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($key,$secret,$redirect){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string');parent::__construct($key,$secret,$redirect,self::REQUEST_URL,self::ACCESS_URL);}}}
/* Eden_Facebook_Graph */
if(!class_exists('Eden_Facebook_Graph')){class Eden_Facebook_Graph extends Eden_Class{const GRAPH_URL='https://graph.facebook.com/';const LOGOUT_URL='https://www.facebook.com/logout.php?next=%s&access_token=%s';protected $_token=NULL;protected $_list=array( 'Friends','Home','Feed','Likes','Movies','Music','Books','Photos','Albums','Videos','VideoUploads','Events','Groups','Checkins');protected $_search=array( 'Posts','Users','Pages','Likes','Places','Events','Groups','Checkins');public static function i(){return self::_getMultiple(__CLASS__);}public function __call($name,$args){if(strpos($name,'get')===0 && in_array(substr($name,3),$this->_list)){$key=preg_replace("/([A-Z])/","/$1",$name);$key=strtolower(substr($key,4));$id='me';if(!empty($args)){$id=array_shift($args);}array_unshift($args,$id,$key);return call_user_func_array(array($this,'_getList'),$args);}else if(strpos($name,'search')===0 && in_array(substr($name,6),$this->_search)){$key=strtolower(substr($name,6));array_unshift($args,$key);return call_user_func_array(array($this,'_search'),$args);}}public function __construct($token){$this->_token=$token;}public function addAlbum($id,$name,$message){Eden_Facebook_Error::i()->argument(1,'string','int')->argument(2,'string')->argument(3,'string');$url=self::GRAPH_URL.$id.'/albums';$post=array('name'=>$name,'message'=>$message);$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);$results=json_decode($this->_call($url,$post),true);return $results['id'];}public function addComment($id,$message){Eden_Facebook_Error::i()->argument(1,'int')->argument(2,'string');$url=self::GRAPH_URL.$id.'/comments';$post=array('message'=>$message);$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);$results=json_decode($this->_call($url,$post),true);return $results['id'];}public function attendEvent($id){Eden_Facebook_Error::i()->argument(1,'int');$url=self::GRAPH_URL.$id.'/attending';$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);json_decode($this->_call($url),true);return $this;}public function checkin($id,$message,$latitude,$longitude,$place,$tags){Eden_Facebook_Error::i()->argument(1,'string','int')->argument(2,'string')->argument(3,'float')->argument(4,'float')->argument(5,'int')->argument(6,'string','array');$url=self::GRAPH_URL.$id.'/checkins';$post=array('message'=>$message);$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);if($message){$post['message']=$message;}if($latitude && $longitute){$post['coordinates']=json_encode(array( 'latitude'=>$latitude,'longitude'=>$longitude));}if($place){$post['place']=$place;}if($tags){$post['tags']=$tags;}$results=json_decode($this->_call($url,$post),true);return $results['id'];}public function createNote($id='me',$subject,$message){Eden_Facebook_Error::i()->argument(1,'string','int')->argument(2,'string')->argument(3,'string');$url=self::GRAPH_URL.$id.'/notes';$post=array('subject'=>$subject,'message'=>$message);$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);$results=json_decode($this->_call($url,$post),true);return $results['id'];}public function declineEvent($id){Eden_Facebook_Error::i()->argument(1,'int');$url=self::GRAPH_URL.$id.'/declined';$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);json_decode($this->_call($url),true);return $this;}public function event($name,$start,$end){return Eden_Facebook_Event::i($this->_token,$name,$start,$end);}public function getFields($id='me',$fields){Eden_Facebook_Error::i()->argument(1,'string','int')->argument(2,'string','array');if(is_array($fields)){$fields=implode(',',$fields);}return $this->getObject($id,NULL,array('fields'=>$fields));}public function getLogoutUrl($redirect){Eden_Facebook_Error::i()->argument(1,'url');return sprintf(self::LOGOUT_URL,urlencode($redirect),$this->_token);}public function getObject($id='me',$connection=NULL,array $query=array(),$auth=true){Eden_Facebook_Error::i()->argument(1,'string','int')->argument(2,'string','null')->argument(3,'array')->argument(4,'bool');if($connection){$connection='/'.$connection;}$url=self::GRAPH_URL.$id.$connection;if($auth){$query['access_token']=$this->_token;}if(!empty($query)){$url.='?'.http_build_query($query);}$object=$this->_call($url);$object=json_decode($object,true);if (isset($object['error'])){Eden_Facebook_Error::i()->setMessage(Eden_Facebook_Error::GRAPH_FAILED)->addVariable($url)->addVariable($object['error']['type'])->addVariable($object['error']['message'])->trigger();}return $object;}public function getPermissions($id='me'){Eden_Facebook_Error::i()->argument(1,'string','int');$permissions=$this->getObject($id,'permissions');return $permissions['data'];}public function getPictureUrl($id='me',$token=true){Eden_Facebook_Error::i()->argument(1,'string','int')->argument(2,'bool');$url=self::GRAPH_URL.$id.'/picture';if($token){$url.='?access_token='.$this->_token;}return $url;}public function getUser(){return $this->getObject('me');}public function like($id){Eden_Facebook_Error::i()->argument(1,'string','int');$url=self::GRAPH_URL.$id.'/likes';$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);$this->_call($url);return $this;}public function link($url){return Eden_Facebook_Link::i($this->_token,$url);}public function maybeEvent($id){Eden_Facebook_Error::i()->argument(1,'int');$url=self::GRAPH_URL.$id.'/maybe';$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);json_decode($this->_call($url),true);return $this;}public function post($message){return Eden_Facebook_Post::i($this->_token,$message);}public function uploadPhoto($albumId,$file,$message=NULL){Eden_Facebook_Error::i()->argument(1,'string','int')->argument(2,'file')->argument(3,'string','null');$url=self::GRAPH_URL.$albumId.'/photos';$post=array('source'=>'@'.$file);$query=array('access_token'=>$this->_token);if($message){$post['message']=$message;}$url.='?'.http_build_query($query);$results=Eden_Curl::i()->setUrl($url)->setConnectTimeout(10)->setFollowLocation(true)->setTimeout(60)->verifyPeer(false)->setUserAgent(Eden_Facebook_Auth::USER_AGENT)->setHeaders('Expect')->when(!empty($post),2)->setPost(true)->setPostFields($post)->getJsonResponse();return $results['id'];}protected function _call($url,array $post=array()){return Eden_Curl::i()->setUrl($url)->setConnectTimeout(10)->setFollowLocation(true)->setTimeout(60)->verifyPeer(false)->setUserAgent(Eden_Facebook_Auth::USER_AGENT)->setHeaders('Expect')->when(!empty($post),2)->setPost(true)->setPostFields(http_build_query($post))->getResponse();}protected function _getList($id,$connection,$start=0,$range=0,$since=0,$until=0,$dateFormat=NULL){$query=array();if($start > 0){$query['offset']=$start;}if($range > 0){$query['limit']=$range;}if(is_string($since)){$since=strtotime($since);}if(is_string($until)){$until=strtotime($until);}if($since !==0){$query['since']=$since;}if($until !==0){$query['until']=$until;}$list=$this->getObject($id,$connection,$query);return $list['data'];}protected function _search($connection,$query,$fields=NULL){$query=array('type'=>$connection,'q'=>$query);if(is_array($fields)){$fields=implode(',',$fields);}if($fields){$query['fields']=$fields;}$results=$this->getObject('search',NULL,$query);return $results['data'];}}}
/* Eden_Facebook_Post */
if(!class_exists('Eden_Facebook_Post')){class Eden_Facebook_Post extends Eden_Class{protected $_id='me';protected $_post=array();public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($token,$message){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string');$this->_token=$token;$this->_post['message']=$message;}public function create(){$url=Eden_Facebook_Graph::GRAPH_URL.$this->_id.'/feed';$query=array('access_token'=>$this->_token);$url.='?'.http_build_query($query);$response=Eden_Curl::i()->setUrl($url)->setConnectTimeout(10)->setFollowLocation(true)->setTimeout(60)->verifyPeer(false)->setUserAgent(Eden_Facebook_Auth::USER_AGENT)->setHeaders('Expect')->setPost(true)->setPostFields(http_build_query($this->_post))->getJsonResponse();return $response;}public function setDescription($description){Eden_Facebook_Error::i()->argument(1,'string');$this->_post['description']=$description;return $this;}public function setIcon($url){Eden_Facebook_Error::i()->argument(1,'url');$this->_post['icon']=$url;return $this;}public function setId($id){Eden_Facebook_Error::i()->argument(1,'numeric');$this->_id=$id;return $this;}public function setLink($url){Eden_Facebook_Error::i()->argument(1,'url');$this->_post['link']=$url;return $this;}public function setPicture($url){Eden_Facebook_Error::i()->argument(1,'url');$this->_post['picture']=$url;return $this;}public function setTitle($title){Eden_Facebook_Error::i()->argument(1,'string');$this->_post['title']=$title;return $this;}public function setVideo($url){Eden_Facebook_Error::i()->argument(1,'url');$this->_post['video']=$url;return $this;}}}
/* Eden_Facebook_Select */
if(!class_exists('Eden_Facebook_Select')){class Eden_Facebook_Select extends Eden_Class{protected $_select=NULL;protected $_from=NULL;protected $_where=array();protected $_sortBy=array();protected $_page=NULL;protected $_length=NULL;public static function i(){return self::_getMultiple(__CLASS__);}public function __toString(){return $this->getQuery();}public function from($from){Eden_Facebook_Error::i()->argument(1,'string');$this->_from=$from;return $this;}public function limit($page,$length){Eden_Facebook_Error::i()->argument(1,'numeric')->argument(2,'numeric');$this->_page=$page;$this->_length=$length;return $this;}public function getQuery(){$where=empty($this->_where) ? '' : 'WHERE '.implode(' AND ',$this->_where);$sort=empty($this->_sortBy) ? '' : 'ORDER BY '.implode(',',$this->_sortBy);$limit=is_null($this->_page) ? '' : 'LIMIT '.$this->_page.','.$this->_length;if(empty($this->_select) || $this->_select=='*'){$this->_select=implode(',',self::$_columns[$this->_from]);}$query=sprintf( 'SELECT %s FROM %s %s %s %s;',$this->_select,$this->_from,$where,$sort,$limit);return str_replace(' ',' ',$query);}public function select($select='*'){Eden_Facebook_Error::i()->argument(1,'string','array');if(is_array($select)){$select=implode(',',$select);}$this->_select=$select;return $this;}public function sortBy($field,$order='ASC'){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string');$this->_sortBy[]=$field.' '.$order;return $this;}public function where($where){Eden_Facebook_Error::i()->argument(1,'string','array');if(is_string($where)){$where=array($where);}$this->_where=array_merge($this->_where,$where);return $this;}protected static $_columns=array( 'album'=>array( 'aid','object_id','owner','cover_pid','cover_object_id','name','created','modified','description','location','size','link','visible','modified_major','edit_link','type','can_upload','photo_count','video_count'),'application'=>array( 'app_id','api_key','canvas_name','display_name','icon_url','logo_url','company_name','developers','description','daily_active_users','weekly_active_users','monthly_active_users','category','subcategory','is_facebook_app','restriction_info','app_domains','auth_dialog_data_help_url','auth_dialog_description','auth_dialog_headline','auth_dialog_perms_explanation','auth_referral_user_perms','auth_referral_friend_perms','auth_referral_default_activity_privacy','auth_referral_enabled','auth_referral_extended_perms','auth_referral_response_type','canvas_fluid_height','canvas_fluid_width','canvas_url','contact_email','created_time','creator_uid','deauth_callback_url','iphone_app_store_id','hosting_url','mobile_web_url','page_tab_default_name','page_tab_url','privacy_policy_url','secure_canvas_url','secure_page_tab_url','server_ip_whitelist','social_discovery','terms_of_service_url','update_ip_whitelist','user_support_email','user_support_url','website_url'),'apprequest'=>array( 'request_id','app_id','recipient_uid','sender_uid','message','data','created_time'),'checkin'=>array( 'checkin_id','author_uid','page_id','app_id','post_id','coords','timestamp','tagged_uids','message'),'comment'=>array( 'xid','object_id','post_id','fromid','time','text','id','username ','reply_xid','post_fbid','app_id','likes','comments','user_likes','is_private'),'comments_info'=>array( 'app_id','xid','count','updated_time'),'connection'=>array( 'source_id','target_id','target_type','is_following'),'cookies'=>array( 'uid','name','value','expires','path'),'developer'=>array('developer_id','application_id','role'),'domain'=>array('domain_id','domain_name'),'domain_admin'=>array('owner_id','domain_id'),'event'=>array( 'eid','name','tagline','nid','pic_small','pic_big','pic_square','pic','host','description','event_type','event_subtype','start_time','end_time','creator','update_time','location','venue','privacy','hide_guest_list','can_invite_friends'),'event_member'=>array( 'uid','eid','rsvp_status','start_time'),'family'=>array( 'profile_id','uid','name','birthday','relationship'),'friend'=>array('uid1','uid2'),'friend_request'=>array( 'uid_to','uid_from','time','message','unread'),'friendlist'=>array('owner','flid','name'),'friendlist_member'=>array('flid','uid'),'group'=>array( 'gid','name','nid','pic_small','pic_big','pic','description','group_type','group_subtype','recent_news','creator','update_time','office','website','venue','privacy','icon','icon34','icon68','email','version'),'group_member'=>array( 'uid','gid','administrator','positions','unread','bookmark_order'),'insights'=>array('object_id','metric','end_time','period','value'),'like'=>array('object_id','post_id','user_id','object_type'),'link'=>array( 'link_id','owner','owner_comment','created_time','title','summary','url','picture','image_urls'),'link_stat'=>array( 'url','normalized_url','share_count','like_count','comment_count','total_count','click_count','comments_fbid','commentsbox_count'),'mailbox_folder'=>array( 'folder_id','viewer_id','name','unread_count','total_count'),'message'=>array( 'message_id','thread_id','author_id','body','created_time','attachment','viewer_id'),'note'=>array( 'uid','note_id','created_time','updated_time','content','content_html','title'),'notification'=>array( 'notification_id','sender_id','recipient_id','created_time','updated_time','title_html','title_text','body_html','body_text','href','app_id','is_unread','is_hidden','object_id','object_type','icon_url'),'object_url'=>array( 'url','id','type','site'),'page'=>array( 'page_id','name','username','description','categories','is_community_page','pic_small','pic_big','pic_square','pic','pic_large','page_url','fan_count','type','website','has_added_app','general_info','can_post','checkins','founded','company_overview','mission','products','location','parking','hours','pharma_safety_info','public_transit','attire','payment_options','culinary_team','general_manager','price_range','restaurant_services','restaurant_specialties','phone','release_date','genre','starring','screenplay_by','directed_by','produced_by','studio','awards','plot_outline','season','network','schedule','written_by','band_members','hometown','current_location','record_label','booking_agent','press_contact','artists_we_like','influences','band_interests','bio','affiliation','birthday','personal_info','personal_interests','built','features','mpg'),'page_admin'=>array('uid','page_id','type'),'page_blocked_user'=>array('page_id','uid'),'page_fan'=>array( 'uid','page_id','type','profile_section','created_time'),'permissions'=>array('uid','PERMISSION_NAME'),'permissions_info'=>array('permission_name','header','summary'),'photo'=>array( 'pid','aid','owner','src_small','src_small_width','src_small_height','src_big','src_big_width','src_big_height','src','src_width','src_height','link','caption','created','modified','position','object_id','album_object_id','images'),'photo_tag'=>array( 'pid','subject','object_id','text','xcoord','ycoord','created'),'place'=>array( 'page_id','name','description','geometry','latitude','longitude','checkin_count','display_subtext'),'privacy'=>array( 'id','object_id','value ','description','allow','deny','owner_id','networks','friends'),'privacy_setting'=>array( 'name','value ','description','allow','deny','networks','friends'),'profile'=>array( 'id','can_post','name','url','pic','pic_square','pic_small','pic_big','pic_crop','type','username'),'question'=>array( 'id','owner','question','created_time','updated_time'),'question_option'=>array( 'id','question_id','name','votes','object_id','owner','created_time'),'question_option_votes'=>array('option_id','voter_id'),'review'=>array( 'reviewee_id','reviewer_id','review_id','message','created_time','rating'),'standard_friend_info'=>array('uid1','uid2'),'standard_user_info'=>array( 'uid','name','username','third_party_id','first_name','last_name','locale','affiliations','profile_url','timezone','birthday','sex','proxied_email','current_location','allowed_restrictions'),'status'=>array( 'uid','status_id','time','source','message'),'stream'=>array( 'post_id','viewer_id ','app_id','source_id ','updated_time','created_time','filter_key','attribution ','actor_id','target_id','message','app_data','action_links','attachment','impressions','comments','likes','privacy','permalink','xid','tagged_ids','message_tags','description','description_tags'),'stream_filter'=>array( 'uid','filter_key ','name','rank ','icon_url','is_visible','type','value'),'stream_tag'=>array('post_id','actor_id','target_id'),'thread'=>array( 'thread_id','folder_id','subject','recipients','updated_time','parent_message_id','parent_thread_id','message_count','snippet','snippet_author','object_id','unread','viewer_id'),'translation'=>array( 'locale','native_hash','native_string','description','translation','approval_status','pre_hash_string','best_string'),'unified_message'=>array( 'message_id','thread_id','subject','body','unread','action_id','timestamp','tags','sender','recipients','object_sender','html_body','attachments','attachment_map','shares','share_map'),'unified_thread'=>array( 'action_id','archived','can_reply','folder','former_participants','has_attachments','is_subscribed','last_visible_add_action_id','name','num_messages','num_unread','object_participants','participants','senders','single_recipient','snippet','snippet_sender','snippet_message_has_attachment','subject','tags','thread_id','thread_participants','timestamp','unread'),'unified_thread_action'=>array( 'action_id','actor','thread_id','timestamp','type','users'),'unified_thread_count'=>array( 'folder','unread_count','unseen_count','last_action_id','last_seen_time','total_threads'),'url_like'=>array('user_id','url'),'user'=>array( 'uid','username','first_name','middle_name','last_name','name','pic_small','pic_big','pic_square','pic','affiliations','profile_update_time','timezone','religion','birthday','birthday_date','sex','hometown_location','meeting_sex','meeting_for','relationship_status','significant_other_id','political','current_location','activities','interests','is_app_user','music','tv','movies','books','quotes','about_me','hs_info','education_history','work_history','notes_count','wall_count','status','has_added_app','online_presence','locale','proxied_email','profile_url','email_hashes','pic_small_with_logo','pic_big_with_logo','pic_square_with_logo','pic_with_logo','allowed_restrictions','verified','profile_blurb','family','website','is_blocked','contact_email','email','third_party_id','name_format','video_upload_limits','games','is_minor','work','education','sports','favorite_athletes','favorite_teams','inspirational_people','languages','likes_count','friend_count','mutual_friend_count','can_post'),'video'=>array( 'vid','owner','album_id','title','description','link','thumbnail_link','embed_html','updated_time','created_time','length','src','src_hq'),'video_tag'=>array('vid','subject','updated_time','created_time'));}}
/* Eden_Facebook_Search */
if(!class_exists('Eden_Facebook_Search')){class Eden_Facebook_Search extends Eden_Class{const ASC='ASC';const DESC='DESC';protected $_database=NULL;protected $_table=NULL;protected $_columns=array();protected $_filter=array();protected $_sort=array();protected $_start=0;protected $_range=0;protected $_group=array();public static function i(){return self::_getMultiple(__CLASS__);}public function __call($name,$args){if(strpos($name,'filterBy')===0){$separator='_';if(isset($args[1]) && is_scalar($args[1])){$separator=(string) $args[1];}$key=Eden_Type_String::i($name)->substr(8)->preg_replace("/([A-Z])/",$separator."$1")->substr(strlen($separator))->strtolower()->get();if(!isset($args[0])){$args[0]=NULL;}$key=$key.'=%s';$this->addFilter($key,$args[0]);return $this;}if(strpos($name,'sortBy')===0){$separator='_';if(isset($args[1]) && is_scalar($args[1])){$separator=(string) $args[1];}$key=Eden_Type_String::i($name)->substr(6)->preg_replace("/([A-Z])/",$separator."$1")->substr(strlen($separator))->strtolower()->get();if(!isset($args[0])){$args[0]=self::ASC;}$this->addSort($key,$args[0]);return $this;}try{return parent::__call($name,$args);}catch(Eden_Error $e){Eden_Facebook_Error::i($e->getMessage())->trigger();}}public function __construct(Eden_Facebook_Fql $database){$this->_database=$database;}public function addFilter(){Eden_Facebook_Error::i()->argument(1,'string');$this->_filter[]=func_get_args();return $this;}public function addSort($column,$order=self::ASC){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string');if($order !=self::DESC){$order=self::ASC;}$this->_sort[$column]=$order;return $this;}public function getCollection($key='last'){$rows=$this->getRows($key);if(count($this->_group)==1){return Eden_Collection::i($rows);}foreach($rows as $key=>$collection){$rows[$key]=Eden_Collection::i($collection['fql_result_set']);}return $rows;}public function getRows($key='last'){$this->group($key);if(empty($this->_group)){return array();}$group=array();foreach($this->_group as $key=>$query){$this->_table=$query['table'];$this->_columns=$query['columns'];$this->_filter=$query['filter'];$this->_sort=$query['sort'];$this->_start=$query['start'];$this->_range=$query['range'];$query=$this->_getQuery();if(!empty($this->_columns)){$query->select(implode(',',$this->_columns));}foreach($this->_sort as $name=>$value){$query->sortBy($name,$value);}if($this->_range){$query->limit($this->_start,$this->_range);}$group[$key]=$query;}$query=$group;if(count($query)==1){$query=$group[$key];}$results=$this->_database->query($query);return $results;}public function getTotal(){$query=$this->_getQuery()->select('COUNT(*) as total');$rows=$this->_database->query($query);if(!isset($rows[0]['total'])){return 0;}return $rows[0]['total'];}public function group($key){Eden_Facebook_Error::i()->argument(1,'scalar');if(is_null($this->_table)){return $this;}$this->_group[$key]=array( 'table'=>$this->_table,'columns'=>$this->_columns,'filter'=>$this->_filter,'sort'=>$this->_sort,'start'=>$this->_start,'range'=>$this->_range);$this->_table=NULL;$this->_columns=array();$this->_filter=array();$this->_sort=array();$this->_start=0;$this->_range=0;return $this;}public function setColumns($columns){if(!is_array($columns)){$columns=func_get_args();}$this->_columns=$columns;return $this;}public function setPage($page){Eden_Facebook_Error::i()->argument(1,'int');if($page < 1){$page=1;}$this->_start=($page - 1) * $this->_range;return $this;}public function setRange($range){Eden_Facebook_Error::i()->argument(1,'int');if($range < 0){$range=25;}$this->_range=$range;return $this;}public function setStart($start){Eden_Facebook_Error::i()->argument(1,'int');if($start < 0){$start=0;}$this->_start=$start;return $this;}public function setTable($table){Eden_Facebook_Error::i()->argument(1,'string');$this->_table=$table;return $this;}protected function _getQuery(){$query=$this->_database->select()->from($this->_table);foreach($this->_filter as $i=>$filter){$where=array_shift($filter);if(!empty($filter)){foreach($filter as $i=>$value){if(!is_string($value)){continue;}$filter[$i]="'".$value."'";}$where=vsprintf($where,$filter);}$query->where($where);}return $query;}}}
/* Eden_Facebook_Subscribe */
if(!class_exists('Eden_Facebook_Subscribe')){class Eden_Facebook_Subscribe extends Eden_Class{const SUBSCRIBE_URL='https://graph.facebook.com/%s/subscriptions';const APPLICATION_URL='https://graph.facebook.com/oauth/access_token?client_id=%s&client_secret=%s&grant_type=%s';const CREDENTIALS='client_credentials';protected $_token=NULL;protected $_meta=NULL;public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($clientId,$secret){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string');$this->_appId=$clientId;$tokenUrl=sprintf(self::APPLICATION_URL,$clientId,$secret,self::CREDENTIALS);$appToken=file_get_contents($tokenUrl);parse_str($appToken,$token);if(!isset($token['access_token'])){return $token;}else{$this->_token=$token['access_token'];}}public function getMeta(){return $this->_meta;}public function getSubscription(){return $this->_getResponse(sprintf(self::SUBSCRIBE_URL,$this->_appId));}public function subscribe($object,$fields,$callbackUrl){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'url');$query=array( 'object'=>$object,'fields'=>$fields,'callback_url'=>$callbackUrl,'verify_token'=>sha1($this->_appId.$object.$callbackUrl));$token=array('access_token'=>$this->_token);$url=sprintf(self::SUBSCRIBE_URL,$this->_appId).'?'.http_build_query($token);return $this->_post($url,$query);}protected function _post($url,array $query=array()){$curl=Eden_Curl::i()->setConnectTimeout(10)->setFollowLocation(true)->setTimeout(60)->verifyHost(false)->verifyPeer(false)->setUrl($url)->setPost(true)->setPostFields($query)->setHeaders('Expect');$response=$curl->getJsonResponse();$this->_meta=$curl->getMeta();$this->_meta['url']=$url;$this->_meta['query']=$query;$this->_meta['response']=$response;return $response;}protected function _getResponse($url,array $query=array()){$query['access_token']=$this->_token;$url=$url.'?'.http_build_query($query);$curl=Eden_Curl::i()->setUrl($url)->verifyHost(false)->verifyPeer(false)->setTimeout(60);$response=$curl->getJsonResponse();$this->_meta['url']=$url;$this->_meta['query']=$query;$this->_meta['curl']=$curl->getMeta();$this->_meta['response']=$response;return $response;}}}
/* Eden_Facebook_Fql */
if(!class_exists('Eden_Facebook_Fql')){class Eden_Facebook_Fql extends Eden_Class{const SELECT='Eden_Facebook_Select';const FQL_URL='https://graph.facebook.com/fql';protected $_queries=array();protected $_token=NULL;public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($token){$this->_token=$token;}public function getCollection($table,$filters=NULL,array $sort=array(),$start=0,$range=0,$index=NULL){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string','array','null')->argument(4,'numeric')->argument(5,'numeric')->argument(6,'numeric','null');$results=$this->getRows($table,$filters,$sort,$start,$range,$index);$collection=Eden_Collection::i();if(is_null($results)){return $collection;}if(!is_null($index)){return $this->model($results);}return $collection->set($results);}public function getModel($table,$name,$value){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string','numeric');$result=$this->getRow($table,$name,$value);$model=Eden_Model::i();if(is_null($result)){return $model;}return $model->set($result);}public function getRow($table,$name,$value){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string','numeric');$query=$this->select()->from($table)->where($name.'='.$value)->limit(0,1);$results=$this->query($query);return isset($results[0]) ? $results[0] : NULL;}public function getRows($table,$filters=NULL,array $sort=array(),$start=0,$range=0,$index=NULL){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string','array','null')->argument(4,'numeric')->argument(5,'numeric')->argument(6,'numeric','null');$query=$this->select()->from($table);if(is_array($filters)){foreach($filters as $i=>$filter){if(!is_array($filter)){continue;}$format=array_shift($filter);$filters[$i]=vsprintf($format,$filter);}}if(!is_null($filters)){$query->where($filters);}if(!empty($sort)){foreach($sort as $key=>$value){if(is_string($key) && trim($key)){$query->sortBy($key,$value);}}}if($range){$query->limit($start,$range);}$results=$this->query($query);if(!is_null($index)){if(empty($results)){$results=NULL;}else{if($index==self::FIRST){$index=0;}if($index==self::LAST){$index=count($results)-1;}if(isset($results[$index])){$results=$results[$index];}else{$results=NULL;}}}return $results;}public function getRowsCount($table,$filters=NULL){Eden_Facebook_Error::i()->argument(1,'string')->argument(2,'string','array','null');$query=$this->select('COUNT(*) as count')->from($table);if(is_array($filters)){foreach($filters as $i=>$filter){if(!is_array($filter)){continue;}$format=array_shift($filter);$filters[$i]=vsprintf($format,$filter);}}if(!is_null($filters)){$query->where($filters);}$results=$this->query($query);if(isset($results[0]['count'])){return $results[0]['count'];}return false;}public function getQueries($index=NULL){if(is_null($index)){return $this->_queries;}if($index==self::FIRST){$index=0;}if($index==self::LAST){$index=count($this->_queries) - 1;}if(isset($this->_queries[$index])){return $this->_queries[$index];}return NULL;}public function query($query){Eden_Facebook_Error::i()->argument(1,'string','array',self::SELECT);if(!is_array($query)){$query=array('q'=>(string) $query);}else{foreach($query as $key=>$select){$query[$key]=(string) $select;}$query=array('q'=>json_encode($query));}$query['access_token']=$this->_token;$url=self::FQL_URL.'?'.http_build_query($query);$results=Eden_Curl::i()->setUrl($url)->setConnectTimeout(10)->setFollowLocation(true)->setTimeout(60)->verifyPeer(false)->setUserAgent(Eden_Facebook_Auth::USER_AGENT)->setHeaders('Expect')->getJsonResponse();$this->_queries[]=array( 'query'=>$query['q'],'results'=>$results);if(isset($results['error']['message'])){Eden_Facebook_Error::i($query['q'].$results['error']['message'])->trigger();}return $results['data'];}public function search(){return Eden_Facebook_Search::i($this);}public function select($select='*'){Eden_Facebook_Error::i()->argument(1,'string','array');return Eden_Facebook_Select::i($select);}}}
/* Eden_Oauth */
if(!class_exists('Eden_Oauth')){class Eden_Oauth extends Eden_Class{public static function i(){return self::_getSingleton(__CLASS__);}public function consumer($url,$key,$secret){return Eden_Oauth_Consumer::i($url,$key,$secret);}public function getHmacGetAccessToken($url,$key,$secret,$token,$tokenSecret,array $query=array(),$realm=NULL,$verifier=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string')->argument(5,'string')->argument(7,'string','null')->argument(8,'string','null');return $this->consumer($url,$key,$secret)->setMethodToGet()->setSignatureToHmacSha1()->when($realm)->setRealm($realm)->endWhen()->when($verifier)->setVerifier($verifier)->endWhen()->setRequestToken($token,$tokenSecret)->getToken($query);}public function getHmacGetAuthorizationAccessToken($url,$key,$secret,$token,$tokenSecret,array $query=array(),$realm=NULL,$verifier=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string')->argument(5,'string')->argument(7,'string','null')->argument(8,'string','null');return $this->consumer($url,$key,$secret)->useAuthorization()->setMethodToGet()->setSignatureToHmacSha1()->when($realm)->setRealm($realm)->endWhen()->when($verifier)->setVerifier($verifier)->endWhen()->setRequestToken($token,$tokenSecret)->getToken($query);}public function getHmacGetAuthorizationRequestToken($url,$key,$secret,array $query=array(),$realm=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(5,'string','null');return $this->consumer($url,$key,$secret)->useAuthorization()->setMethodToGet()->setSignatureToHmacSha1()->when($realm)->setRealm($realm)->endWhen()->getToken($query);}public function getHmacGetRequestToken($url,$key,$secret,array $query=array(),$realm=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(5,'string','null');return $this->consumer($url,$key,$secret)->setMethodToGet()->setSignatureToHmacSha1()->when($realm)->setRealm($realm)->endWhen()->getToken($query);}public function getHmacPostAccessToken($url,$key,$secret,$token,$tokenSecret,array $query=array(),$realm=NULL,$verifier=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string')->argument(5,'string')->argument(7,'string','null')->argument(8,'string','null');return $this->consumer($url,$key,$secret)->setMethodToPost()->setSignatureToHmacSha1()->when($realm)->setRealm($realm)->endWhen()->when($verifier)->setVerifier($verifier)->endWhen()->setRequestToken($token,$tokenSecret)->getToken($query);}public function getHmacPostAuthorizationAccessToken($url,$key,$secret,$token,$tokenSecret,array $query=array(),$realm=NULL,$verifier=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string')->argument(5,'string')->argument(7,'string','null')->argument(8,'string','null');return $this->consumer($url,$key,$secret)->useAuthorization()->setMethodToPost()->setSignatureToHmacSha1()->when($realm)->setRealm($realm)->endWhen()->when($verifier)->setVerifier($verifier)->endWhen()->setRequestToken($token,$tokenSecret)->getToken($query);}public function getHmacPostAuthorizationRequestToken($url,$key,$secret,array $query=array(),$realm=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(5,'string','null');return $this->consumer($url,$key,$secret)->useAuthorization()->setMethodToPost()->setSignatureToHmacSha1()->when($realm)->setRealm($realm)->endWhen()->getToken($query);}public function getHmacPostRequestToken($url,$key,$secret,array $query=array(),$realm=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(5,'string','null');return $this->consumer($url,$key,$secret)->setMethodToPost()->setSignatureToHmacSha1()->when($realm)->setRealm($realm)->endWhen()->getToken($query);}public function getPlainGetAccessToken($url,$key,$secret,$token,$tokenSecret,array $query=array(),$realm=NULL,$verifier=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string')->argument(5,'string')->argument(7,'string','null')->argument(8,'string','null');return $this->consumer($url,$key,$secret)->setMethodToGet()->setSignatureToPlainText()->when($realm)->setRealm($realm)->endWhen()->when($verifier)->setVerifier($verifier)->endWhen()->setRequestToken($token,$tokenSecret)->getToken($query);}public function getPlainGetAuthorizationAccessToken($url,$key,$secret,$token,$tokenSecret,array $query=array(),$realm=NULL,$verifier=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string')->argument(5,'string')->argument(7,'string','null')->argument(8,'string','null');return $this->consumer($url,$key,$secret)->useAuthorization()->setMethodToGet()->setSignatureToPlainText()->when($realm)->setRealm($realm)->endWhen()->when($verifier)->setVerifier($verifier)->endWhen()->setRequestToken($token,$tokenSecret)->getToken($query);}public function getPlainGetAuthorizationRequestToken($url,$key,$secret,array $query=array(),$realm=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(5,'string','null');return $this->consumer($url,$key,$secret)->useAuthorization()->setMethodToGet()->setSignatureToPlainText()->when($realm)->setRealm($realm)->endWhen()->getToken($query);}public function getPlainGetRequestToken($url,$key,$secret,array $query=array(),$realm=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(5,'string','null');return $this->consumer($url,$key,$secret)->setMethodToGet()->setSignatureToPlainText()->when($realm)->setRealm($realm)->endWhen()->getToken($query);}public function getPlainPostAccessToken($url,$key,$secret,$token,$tokenSecret,array $query=array(),$realm=NULL,$verifier=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string')->argument(5,'string')->argument(7,'string','null')->argument(8,'string','null');return $this->consumer($url,$key,$secret)->setMethodToPost()->setSignatureToPlainText()->when($realm)->setRealm($realm)->endWhen()->when($verifier)->setVerifier($verifier)->endWhen()->setRequestToken($token,$tokenSecret)->getToken($query);}public function getPlainPostAuthorizationAccessToken($url,$key,$secret,$token,$tokenSecret,array $query=array(),$realm=NULL,$verifier=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string')->argument(5,'string')->argument(7,'string','null')->argument(8,'string','null');return $this->consumer($url,$key,$secret)->useAuthorization()->setMethodToPost()->setSignatureToPlainText()->when($realm)->setRealm($realm)->endWhen()->when($verifier)->setVerifier($verifier)->endWhen()->setRequestToken($token,$tokenSecret)->getToken($query);}public function getPlainPostAuthorizationRequestToken($url,$key,$secret,array $query=array(),$realm=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(5,'string','null');return $this->consumer($url,$key,$secret)->useAuthorization()->setMethodToPost()->setSignatureToPlainText()->when($realm)->setRealm($realm)->endWhen()->getToken($query);}public function getPlainPostRequestToken($url,$key,$secret,array $query=array(),$realm=NULL){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(5,'string','null');return $this->consumer($url,$key,$secret)->setMethodToPost()->setSignatureToPlainText()->when($realm)->setRealm($realm)->endWhen()->getToken($query);}public function server(){return Eden_Oauth_Server::i();}}}
/* Eden_Oauth_Error */
if(!class_exists('Eden_Oauth_Error')){class Eden_Oauth_Error extends Eden_Error{public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Oauth_Base */
if(!class_exists('Eden_Oauth_Base')){class Eden_Oauth_Base extends Eden_Class{const HMAC_SHA1='HMAC-SHA1';const RSA_SHA1='RSA-SHA1';const PLAIN_TEXT='PLAINTEXT';const POST='POST';const GET='GET';const OAUTH_VERSION='1.0';protected function _buildQuery($params,$separator='&',$noQuotes=true,$subList=false){if(empty($params)){return '';}$keys=$this->_encode(array_keys($params));$values=$this->_encode(array_values($params));$params=array_combine($keys,$values);uksort($params,'strcmp');foreach ($params as $key=>$value){if (is_array($value)){natsort($value);$params[$key]=$this->_buildQuery($value,$separator,$noQuotes,true);continue;}if(!$noQuotes){$value='"'.$value.'"';}$params[$key]=$value;}if($subList){return $params;}foreach($params as $key=>$value){$params[$key]=$key.'='.$value;}return implode($separator,$params);}protected function _encode($string){if (is_array($string)){foreach($string as $i=>$value){$string[$i]=$this->_encode($value);}return $string;}if (is_scalar($string)){return str_replace('%7E','~',rawurlencode($string));}return NULL;}protected function _decode($raw_input){return rawurldecode($raw_input);}protected function _parseString($string){$array=array();if(strlen($string) < 1){return $array;}$keyvalue=explode('&',$query_string);foreach ($keyvalue as $pair){list($k,$v)=explode('=',$pair,2);if (isset($query_array[$k])){if (is_scalar($query_array[$k])){$query_array[$k]=array($query_array[$k]);}array_push($query_array[$k],$v);}else{$query_array[$k]=$v;}}return $array;}}}
/* Eden_Oauth_Consumer */
if(!class_exists('Eden_Oauth_Consumer')){class Eden_Oauth_Consumer extends Eden_Oauth_Base{const AUTH_HEADER='Authorization: OAuth %s';const POST_HEADER='Content-Type: application/x-www-form-urlencoded';protected $_consumerKey=NULL;protected $_consumerSecret=NULL;protected $_requestToken=NULL;protected $_requestSecret=NULL;protected $_useAuthorization=false;protected $_url=NULL;protected $_method=NULL;protected $_realm=NULL;protected $_time=NULL;protected $_nonce=NULL;protected $_verifier=NULL;protected $_callback=NULL;protected $_signature=NULL;protected $_meta=array();protected $_headers=array();protected $_json=false;public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($url,$key,$secret){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string');$this->_consumerKey=$key;$this->_consumerSecret=$secret;$this->_url=$url;$this->_time=time();$this->_nonce=md5(uniqid(rand(),true));$this->_signature=self::PLAIN_TEXT;$this->_method=self::GET;}public function getAuthorization($signature,$string=true){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'bool');$params=array( 'realm'=>$this->_realm,'oauth_consumer_key'=>$this->_consumerKey,'oauth_token'=>$this->_requestToken,'oauth_signature_method'=>self::HMAC_SHA1,'oauth_signature'=>$signature,'oauth_timestamp'=>$this->_time,'oauth_nonce'=>$this->_nonce,'oauth_version'=>self::OAUTH_VERSION,'oauth_verifier'=>$this->_verifier,'oauth_callback'=>$this->_callback);if(is_null($this->_realm)){unset($params['realm']);}if(is_null($this->_requestToken)){unset($params['oauth_token']);}if(is_null($this->_verifier)){unset($params['oauth_verifier']);}if(is_null($this->_callback)){unset($params['oauth_callback']);}if(!$string){return $params;}return sprintf(self::AUTH_HEADER,$this->_buildQuery($params,',',false));}public function getDomDocumentResponse(array $query=array()){$xml=new DOMDocument();$xml->loadXML($this->getResponse($query));return $xml;}public function getHmacPlainTextSignature(){return $this->_consumerSecret.'&'.$this->_tokenSecret;}public function getHmacSha1Signature(array $query=array()){$params=array( 'oauth_consumer_key'=>$this->_consumerKey,'oauth_token'=>$this->_requestToken,'oauth_signature_method'=>self::HMAC_SHA1,'oauth_timestamp'=>$this->_time,'oauth_nonce'=>$this->_nonce,'oauth_version'=>self::OAUTH_VERSION,'oauth_verifier'=>$this->_verifier,'oauth_callback'=>$this->_callback);if(is_null($this->_requestToken)){unset($params['oauth_token']);}if(is_null($this->_verifier)){unset($params['oauth_verifier']);}if(is_null($this->_callback)){unset($params['oauth_callback']);}$query=array_merge($params,$query);$query=$this->_buildQuery($query);$string=array($this->_method,$this->_encode($this->_url),$this->_encode($query));$string=implode('&',$string);$key=$this->_encode($this->_consumerSecret).'&'.$this->_encode($this->_requestSecret);return base64_encode(hash_hmac('sha1',$string,$key,true));}public function getJsonResponse(array $query=array(),$assoc=true){return json_decode($this->getResponse($query),$assoc);}public function getMeta($key=NULL){Eden_Oauth_Error::i()->argument(1,'string','null');if(isset($this->_meta[$key])){return $this->_meta[$key];}return $this->_meta;}public function getQueryResponse(array $query=array()){parse_str($this->getResponse($query),$response);return $response;}public function getResponse(array $query=array()){$headers=$this->_headers;$json=NULL;if($this->_json){$json=json_encode($query);$query=array();}$signature=$this->getSignature($query);$authorization=$this->getAuthorization($signature,false);if($this->_useAuthorization){$headers[]=sprintf(self::AUTH_HEADER,$this->_buildQuery($authorization,',',false));}else{$query=array_merge($authorization,$query);}$query=$this->_buildQuery($query);$url=$this->_url;$curl=Eden_Curl::i()->verifyHost(false)->verifyPeer(false);if($this->_method==self::POST){$headers[]=self::POST_HEADER;if(!is_null($json)){$query=$json;}$response=$curl->setUrl($url)->setPost(true)->setPostFields($query)->setHeaders($headers)->getResponse();}else{if(trim($query)){$connector=NULL;if(strpos($url,'?')===false){$connector='?';}else if(substr($url,-1) !='?'){$connector='&';}$url.=$connector.$query;}$response=$curl->setUrl($url)->setHeaders($headers)->getResponse();}$this->_meta=$curl->getMeta();$this->_meta['url']=$url;$this->_meta['authorization']=$authorization;$this->_meta['headers']=$headers;$this->_meta['query']=$query;$this->_meta['response']=$response;return $response;}public function getSignature(array $query=array()){switch($this->_signature){case self::HMAC_SHA1: return $this->getHmacSha1Signature($query);case self::RSA_SHA1: case self::PLAIN_TEXT: default: return $this->getHmacPlainTextSignature();}}public function getSimpleXmlResponse(array $query=array()){return simplexml_load_string($this->getResponse($query));}public function jsonEncodeQuery(){$this->_json=true;return $this;}public function setCallback($url){Eden_Oauth_Error::i()->argument(1,'string');$this->_callback=$url;return $this;}public function setHeaders($key,$value=NULL){Eden_Oauth_Error::i()->argument(1,'array','string')->argument(2,'scalar','null');if(is_array($key)){$this->_headers=$key;return $this;}$this->_headers[]=$key.': '.$value;return $this;}public function setMethodToGet(){$this->_method=self::GET;return $this;}public function setMethodToPost(){$this->_method=self::POST;return $this;}public function setRealm($realm){Eden_Oauth_Error::i()->argument(1,'string');$this->_realm=$realm;return $this;}public function setSignatureToHmacSha1(){$this->_signature=self::HMAC_SHA1;return $this;}public function setSignatureToRsaSha1(){$this->_signature=self::RSA_SHA1;return $this;}public function setSignatureToPlainText(){$this->_signature=self::PLAIN_TEXT;return $this;}public function setToken($token,$secret){Eden_Oauth_Error::i()->argument(1,'string')->argument(2,'string');$this->_requestToken=$token;$this->_requestSecret=$secret;return $this;}public function setVerifier($verifier){Eden_Oauth_Error::i()->argument(1,'scalar');$this->_verifier=$verifier;return $this;}public function useAuthorization($use=true){Eden_Oauth_Error::i()->argument(1,'bool');$this->_useAuthorization=$use;return $this;}}}
/* Eden_Twitter */
if(!class_exists('Eden_Twitter')){class Eden_Twitter extends Eden_Class{public static function i(){return self::_getSingleton(__CLASS__);}public function auth($key,$secret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string');return Eden_Twitter_Oauth::i($key,$secret);}public function directMessage($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Directmessage::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function favorites($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Favorites::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function friends($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Friends::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function geo($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Geo::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function help($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Help::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function lists($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_List::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function saved($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Saved::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function search($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Search::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function spam($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Spam::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function streaming($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Streaming::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function suggestions($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Suggestions::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function timeline($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Timeline::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function trends($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Trends::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function tweets($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Tweets::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}public function users($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');return Eden_Twitter_Users::i($consumerKey,$consumerSecret,$accessToken,$accessSecret);}}}
/* Eden_Twitter_Error */
if(!class_exists('Eden_Twitter_Error')){class Eden_Twitter_Error extends Eden_Error{public static function i($message=NULL,$code=0){$class=__CLASS__;return new $class($message,$code);}}}
/* Eden_Twitter_Base */
if(!class_exists('Eden_Twitter_Base')){class Eden_Twitter_Base extends Eden_Oauth_Base{protected $_consumerKey=NULL;protected $_consumerSecret=NULL;protected $_accessToken=NULL;protected $_accessSecret=NULL;protected $_signingKey=NULL;protected $_baseString=NULL;protected $_signingParams=NULL;protected $_url=NULL;protected $_authParams=NULL;protected $_authHeader=NULL;protected $_headers=NULL;protected $_query=array();public function __construct($consumerKey,$consumerSecret,$accessToken,$accessSecret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'string');$this->_consumerKey=$consumerKey;$this->_consumerSecret=$consumerSecret;$this->_accessToken=$accessToken;$this->_accessSecret=$accessSecret;}public function getMeta($key=NULL){Eden_Twitter_Error::i()->argument(1,'string','null');if(isset($this->_meta[$key])){return $this->_meta[$key];}return $this->_meta;}public function isJson($string){Eden_Twitter_Error::i()->argument(1,'string');json_decode($string);return (json_last_error()==JSON_ERROR_NONE);}protected function _accessKey($array){foreach($array as $key=>$val){if(is_array($val)){$array[$key]=$this->_accessKey($val);}if(is_null($val) || empty($val)){unset($array[$key]);}else if($val===false){$array[$key]=0;}else if($val===true){$array[$key]=1;}}return $array;}protected function _getResponse($url,array $query=array()){$query=$this->_accessKey($query);$rest=Eden_Oauth::i()->consumer($url,$this->_consumerKey,$this->_consumerSecret)->setMethodToGet()->setToken($this->_accessToken,$this->_accessSecret)->setSignatureToHmacSha1();$response=$rest->getResponse($query);unset($this->_query);$this->_meta=$rest->getMeta();if($this->isJson($response)){return json_decode($response,true);}else{return $response;}}protected function _post($url,array $query=array()){$query=$this->_accessKey($query);$rest=Eden_Oauth::i()->consumer($url,$this->_consumerKey,$this->_consumerSecret)->setMethodToPost()->setToken($this->_accessToken,$this->_accessSecret)->setSignatureToHmacSha1();$signature=$rest->getSignature($query);$authorization=$rest->getAuthorization($signature,false);$authorization=$this->_buildQuery($authorization);if(is_array($query)){$query=$this->_buildQuery($query);}$headers=array();$headers[]=Eden_Oauth_Consumer::POST_HEADER;$connector=NULL;if(strpos($url,'?')===false){$connector='?';}else if(substr($url,-1) !='?'){$connector='&';}$url.=$connector.$authorization;$curl=Eden_Curl::i()->verifyHost(false)->verifyPeer(false)->setUrl($url)->setPost(true)->setPostFields($query)->setHeaders($headers);$response=$curl->getJsonResponse();unset($this->_query);$this->_meta=$curl->getMeta();$this->_meta['url']=$url;$this->_meta['authorization']=$authorization;$this->_meta['headers']=$headers;$this->_meta['query']=$query;return $response;}protected function _upload($url,array $query=array()){$query=$this->_accessKey($query);$this->_url=$url;$this->_getAuthentication();$this->_headers['Expect']='';foreach($this->_headers as $k=>$v){$headers[]=trim($k.': '.$v);}$curl=Eden_Curl::i()->verifyHost(false)->verifyPeer(false)->setUrl($url)->setPost(true)->setPostFields($query)->setHeaders($headers);$response=$curl->getJsonResponse();unset($this->_query);$this->_meta=$curl->getMeta();$this->_meta['url']=$url;$this->_meta['headers']=$headers;$this->_meta['query']=$query;return $response;}protected function _getAuthentication(){$defaults=array( 'oauth_version'=>'1.0','oauth_nonce'=>md5(uniqid(rand(),true)),'oauth_timestamp'=>time(),'oauth_consumer_key'=>$this->_consumerKey,'oauth_signature_method'=>'HMAC-SHA1','oauth_token'=>$this->_accessToken);foreach ($defaults as $k=>$v){$this->_signingParams[$this->safeEncode($k)]=$this->safeEncode($v);}uksort($this->_signingParams,'strcmp');foreach ($this->_signingParams as $k=>$v){$k=$this->safeEncode($k);$v=$this->safeEncode($v);$_signing_params[$k]=$v;$kv[]="{$k}={$v}";}$this->_signingParams=implode('&',$kv);$this->_authParams=array_intersect_key($defaults,$_signing_params);$base=array('POST',$this->_url,$this->_signingParams);$this->_baseString=implode('&',$this->safeEncode($base));$this->_signingKey=$this->safeEncode($this->_consumerSecret).'&'.$this->safeEncode($this->_accessSecret);$this->_authParams['oauth_signature']=$this->safeEncode( base64_encode(hash_hmac('sha1',$this->_baseString,$this->_signingKey,true)));foreach ($this->_authParams as $k=>$v){$kv[]="{$k}=\"{$v}\"";}$this->_authHeader='OAuth '.implode(',',$kv);$this->_headers['Authorization']=$this->_authHeader;}protected function safeEncode($data){if (is_array($data)){return array_map(array($this,'safeEncode'),$data);}else if (is_scalar($data)){return str_ireplace(array('+','%7E'),array(' ','~'),rawurlencode($data));}else{return '';}}}}
/* Eden_Twitter_Oauth */
if(!class_exists('Eden_Twitter_Oauth')){class Eden_Twitter_Oauth extends Eden_Class{const REQUEST_URL='https://api.twitter.com/oauth/request_token';const AUTHORIZE_URL='https://api.twitter.com/oauth/authorize';const ACCESS_URL='https://api.twitter.com/oauth/access_token';protected $_key=NULL;protected $_secret=NULL;public static function i(){return self::_getMultiple(__CLASS__);}public function __construct($key,$secret){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string');$this->_key=$key;$this->_secret=$secret;}public function getAccessToken($token,$secret,$verifier){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string');return Eden_Oauth::i()->consumer( self::ACCESS_URL,$this->_key,$this->_secret)->useAuthorization()->setMethodToPost()->setToken($token,$secret)->setVerifier($verifier)->setSignatureToHmacSha1()->getQueryResponse();}public function getLoginUrl($token,$redirect,$force_login=false){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'bool');$query=array('oauth_token'=>$token,'oauth_callback'=>$redirect,'force_login'=>(int)$force_login);$query=http_build_query($query);return self::AUTHORIZE_URL.'?'.$query;}public function getRequestToken(){return Eden_Oauth::i()->consumer( self::REQUEST_URL,$this->_key,$this->_secret)->useAuthorization()->setMethodToPost()->setSignatureToHmacSha1()->getQueryResponse();}}}
/* Eden_Twitter_Directmessage */
if(!class_exists('Eden_Twitter_Directmessage')){class Eden_Twitter_Directmessage extends Eden_Twitter_Base{const URL_DIRECT_MESSAGE='https://api.twitter.com/1.1/direct_messages.json';const URL_SENT_MESSAGE='https://api.twitter.com/1.1/direct_messages/sent.json';const URL_SHOW_MESSAGE='https://api.twitter.com/1.1/direct_messages/show.json';const URL_REMOVE_MESSAGE='https://api.twitter.com/1.1/direct_messages/destroy.json';const URL_NEW_MESSAGE='https://api.twitter.com/1.1/direct_messages/new.json';public static function i(){return self::_getMultiple(__CLASS__);}public function getList(){return $this->_getResponse(self::URL_DIRECT_MESSAGE,$this->_query);}public function getSent(){return $this->_getResponse(self::URL_SENT_MESSAGE,$this->_query);}public function getDetail($messageId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['id']=$messageId;return $this->_getResponse(self::URL_SHOW_MESSAGE,$this->_query);}public function remove($id){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['id']=$id;return $this->_post(self::URL_REMOVE_MESSAGE,$this->_query);}public function send($id,$text){Eden_Twitter_Error::i()->argument(1,'string','int')->argument(2,'string');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}$this->_query['text']=$text;return $this->_post(self::URL_NEW_MESSAGE,$this->_query);}public function includeEntities(){$this->_query['include_entities']=true;return $this;}public function setCount($count){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['count']=$count;return $this;}public function setMaxId($maxId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['max_id']=$maxId;return $this;}public function setPage($page){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['page']=$page;return $this;}public function setSinceId($sinceId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['since_id']=$sinceId;return $this;}public function setWrap($wrap){Eden_Twitter_Error::i()->argument(1,'bool');$this->_wrap=$wrap;return $this;}public function skipStatus(){$this->_query['skip_status']=true;return $this;}}}
/* Eden_Twitter_Favorites */
if(!class_exists('Eden_Twitter_Favorites')){class Eden_Twitter_Favorites extends Eden_Twitter_Base{const URL_GET_FAVORITES='https://api.twitter.com/1.1/favorites/list.json';const URL_FAVORITE_STATUS='https://api.twitter.com/1.1/favorites/create.json';const URL_UNFAVORITE_STATUS='https://api.twitter.com/1.1/favorites/destroy.json';public static function i(){return self::_getMultiple(__CLASS__);}public function addFavorites($id){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['id']=$id;return $this->_post(self::URL_FAVORITE_STATUS,$this->_query);}public function getList(){return $this->_getResponse(self::URL_GET_FAVORITES,$this->_query);}public function remove($id){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['id']=$id;return $this->_post(self::URL_UNFAVORITE_STATUS,$this->_query);}public function setUserId($id){Eden_Twitter_Error::i()->argument(1,'int','string');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}return $this;}public function setCount($count){Eden_Twitter_Error::i()->argument(1,'int','string');$this->_query['count']=$count;return $this;}public function setSinceId($sinceId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['since_id']=$sinceId;return $this;}public function setMaxId($maxId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['max_id']=$maxId;return $this;}public function setPage($page){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['page']=$page;return $this;}public function includeEntities(){$this->_query['include_entities']=true;return $this;}}}
/* Eden_Twitter_Friends */
if(!class_exists('Eden_Twitter_Friends')){class Eden_Twitter_Friends extends Eden_Twitter_Base{const URL_FRIENDS='https://api.twitter.com/1.1/friends/ids.json';const URL_FOLLOWERS='https://api.twitter.com/1.1/followers/ids.json';const URL_LOOKUP_FRIENDS='https://api.twitter.com/1.1/friendships/lookup.json';const URL_INCOMING_FRIENDS='https://api.twitter.com/1.1/friendships/incoming.json';const URL_OUTGOING_FRIENDS='https://api.twitter.com/1.1/friendships/outgoing.json';const URL_FOLLOW_FRIENDS='https://api.twitter.com/1.1/friendships/create.json';const URL_UNFOLLOW_FRIENDS='https://api.twitter.com/1.1/friendships/destroy.json';const URL_UPDATE='https://api.twitter.com/1.1/friendships/update.json';const URL_SHOW_FRIENDS='https://api.twitter.com/1.1/friendships/show.json';public static function i(){return self::_getMultiple(__CLASS__);}public function getFollowing($id=NULL){Eden_Twitter_Error::i()->argument(1,'int','string','null');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['string_name']=$id;}return $this->_getResponse(self::URL_FRIENDS,$this->_query);}public function getFollowers($id=NULL){Eden_Twitter_Error::i()->argument(1,'int','string','null');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['string_name']=$id;}return $this->_getResponse(self::URL_FOLLOWERS,$this->_query);}public function follow($id,$notify=false){Eden_Twitter_Error::i()->argument(1,'string','int')->argument(2,'bool');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}return $this->_post(self::URL_FOLLOW_FRIENDS,$this->_query);}public function getPendingFollowing(){return $this->_getResponse(self::URL_OUTGOING_FRIENDS,$this->_query);}public function getPendingFollowers(){return $this->_getResponse(self::URL_INCOMING_FRIENDS,$this->_query);}public function getRelationship($id,$target){Eden_Twitter_Error::i()->argument(1,'string','int')->argument(2,'string','int');if(is_int($id)){$this->_query['source_id']=$id;}else{$this->_query['source_screen_name']=$id;}if(is_int($target)){$this->_query['target_id']=$target;}else{$this->_query['target_screen_name']=$target;}return $this->_getResponse(self::URL_SHOW_FRIENDS,$this->_query);}public function getRelationships($id=NULL){Eden_Twitter_Error::i()->argument(1,'int','string','array','null');if(is_null($id)){return $this->_getResponse(self::URL_LOOKUP_FRIENDS,$this->_query);}if(!is_array($id)){$id=func_get_args();}if(is_int($id[0])){$this->_query['user_id']=implode(',',$id);}else{$this->_query['screen_name']=implode(',',$id);}return $this->_getResponse(self::URL_LOOKUP_FRIENDS,$this->_query);}public function unfollow($id,$entities=false){Eden_Twitter_Error::i()->argument(1,'string','int')->argument(2,'boolean');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['string_name']=$id;}if($entities){$this->_query['include_entities']=$entities;}return $this->_post(self::URL_UNFOLLOW_FRIENDS,$this->_query);}public function update($id,$device=false,$retweets=false){Eden_Twitter_Error::i()->argument(1,'string','int')->argument(2,'bool')->argument(3,'bool');if(is_string($id)){$this->_query['screen_name']=$id;}else{$this->_query['user_id']=$id;}if($device){$this->_query['device']=1;}if($retweets){$this->_query['retweets']=1;}return $this->_post(self::URL_UPDATE,$this->_query);}}}
/* Eden_Twitter_Geo */
if(!class_exists('Eden_Twitter_Geo')){class Eden_Twitter_Geo extends Eden_Twitter_Base{const URL_GET_PLACE='https://api.twitter.com/1.1/geo/id/%s.json';const URL_GET_GEOCODE='https://api.twitter.com/1.1/geo/reverse_geocode.json';const URL_SEARCH='https://api.twitter.com/1.1/geo/search.json';const URL_GET_SIMILAR_PLACES='https://api.twitter.com/1.1/geo/similar_places.json';const URL_CREATE_PLACE='https://api.twitter.com/1.1/geo/place.json';public static function i(){return self::_getMultiple(__CLASS__);}public function createPlace($name,$contained,$token,$latitude,$longtitude){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string')->argument(3,'string')->argument(4,'float','int')->argument(5,'float','int');$this->_query['lat']=$latitude;$this->_query['long']=$longtitude;$this->_query['name']=$name;$this->_query['token']=$token;$this->_query['contained_within']=$contained;return $this->_post(self::URL_CREATE_PLACE,$this->_query);}public function getGeocode($lat,$long){Eden_Twitter_Error::i()->argument(1,'float','int')->argument(2,'float','int');$this->_query['lat']=$latitude;$this->_query['long']=$longtitude;return $this->_getResponse(self::URL_GET_GEOCODE,$this->_query);}public function getPlace($id){Eden_Twitter_Error::i()->argument(1,'int');return $this->_getResponse(sprintf(self::URL_GET_PLACE,$id));}public function getSimilarPlaces($latitude,$longtitude,$name){Eden_Twitter_Error::i()->argument(1,'float','int')->argument(2,'float','int')->argument(3,'string');$this->_query['lat']=$latitude;$this->_query['long']=$longtitude;$this->_query['name']=$name;return $this->_getResponse(self::URL_GET_SIMILAR_PLACES,$this->_query);}public function search($query=NULL){Eden_Twitter_Error::i()->argument(1,'string','null');$this->_query['query']=$query;return $this->_getResponse(self::URL_SEARCH,$this->_query);}public function setAccuracy($accuracy){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['accuracy']=$accuracy;return $this;}public function setAddress($address){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['attribute:street_address']=$address;return $this;}public function setCallback($callback){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['callback']=$callback;return $this;}public function setContained($contained){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['contained_within']=$contained;return $this;}public function setGranularity($granularity){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['granularity']=$granularity;return $this;}public function setIp($ip){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['ip']=$ip;return $this;}public function setLatitude($latitude){Eden_Twitter_Error::i()->argument(1,'int','float');$this->_query['lat']=$latitude;return $this;}public function setLongtitude($longtitude){Eden_Twitter_Error::i()->argument(1,'int','float');$this->_query['long']=$longtitude;return $this;}public function setMaxResults($maxResults){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['max_results']=$maxResults;return $this;}}}
/* Eden_Twitter_Help */
if(!class_exists('Eden_Twitter_Help')){class Eden_Twitter_Help extends Eden_Twitter_Base{const URL_CONFIGURATION='https://api.twitter.com/1.1/help/configuration.json';const URL_LANGUAGES='https://api.twitter.com/1.1/help/languages.json';const URL_PRIVACY='https://api.twitter.com/1.1/help/privacy.json';const URL_TOS='https://api.twitter.com/1.1/help/tos.json';const URL_RATE_LIMIT='https://api.twitter.com/1.1/application/rate_limit_status.json';public static function i(){return self::_getMultiple(__CLASS__);}public function getConfiguration(){return $this->_getResponse(self::URL_CONFIGURATION);}public function getLanguages(){return $this->_getResponse(self::URL_LANGUAGES);}public function getPrivacy(){return $this->_getResponse(self::URL_PRIVACY);}public function getTermsAndCondition(){return $this->_getResponse(self::URL_TOS);}public function getRateLimitStatus($resources=NULL){Eden_Twitter_Error::i()->argument(1,'string','null');$this->_query['resources']=$resources;return $this->_getResponse(self::URL_RATE_LIMIT,$this->_query);}}}
/* Eden_Twitter_List */
if(!class_exists('Eden_Twitter_List')){class Eden_Twitter_List extends Eden_Twitter_Base{const URL_ALL_LIST='https://api.twitter.com/1.1/lists/list.json';const URL_GET_STATUS='https://api.twitter.com/1.1/lists/statuses.json';const URL_REMOVE_MEMBER='https://api.twitter.com/1.1/lists/members/destroy.json';const URL_MEMBERSHIP='https://api.twitter.com/1.1/lists/memberships.json';const URL_SUBSCRIBER='https://api.twitter.com/1.1/lists/subscribers.json';const URL_CREATE_SUBCRIBER='https://api.twitter.com/1.1/lists/subscribers/create.json';const URL_SHOW_SUBSCRIBER='https://api.twitter.com/1.1/lists/subscribers/show.json';const URL_REMOVE_SUBCRIBER='https://api.twitter.com/1.1/lists/subscribers/destroy.json';const URL_CREATE_ALL='https://api.twitter.com/1.1/lists/members/create_all.json';const URL_GET_MEMBER='https://api.twitter.com/1.1/lists/members/show.json';const URL_GET_DETAIL='https://api.twitter.com/1.1/lists/members.json';const URL_CREATE_MEMBER='https://api.twitter.com/1.1/lists/members/create.json';const URL_REMOVE='https://api.twitter.com/1.1/lists/destroy.json';const URL_UPDATE='https://api.twitter.com/1.1/lists/update.json';const URL_CREATE_USER='https://api.twitter.com/1.1/lists/create.json';const URL_SHOW='https://api.twitter.com/1.1/lists/show.json';const URL_GET_SUBSCRITION='https://api.twitter.com/1.1/lists/subscriptions.json';public static function i(){return self::_getMultiple(__CLASS__);}public function addMember($userId,$listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string')->argument(3,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}if(is_int($userId)){$this->_query['user_id']=$userId;}else{$this->_query['screen_name']=$userId;}return $this->_post(self::URL_CREATE_MEMBER,$this->_query);}public function addMembers($listId,$userIds,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'array')->argument(3,'int','string');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}if(is_int($userIds[0])){$this->_query['user_id']=implode(',',$userIds);}else{$this->_query['screen_name']=implode(',',$userIds);}return $this->_post(self::URL_CREATE_ALL,$this->_query);}public function createList($name){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['name']=$name;return $this->_post(self::URL_CREATE_USER,$this->_query);}public function getMembers($listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}return $this->_getResponse(self::URL_GET_DETAIL,$this->_query);}public function getAllLists($id=NULL){Eden_Twitter_Error::i()->argument(2,'int','string','null');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}return $this->_getResponse(self::URL_ALL_LIST,$this->_query);}public function getList($listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}return $this->_getResponse(self::URL_SHOW,$this->_query);}public function getMemberships($id=NULL){Eden_Twitter_Error::i()->argument(1,'int','string','null');if(!is_null($id)){if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}}return $this->_getResponse(self::URL_MEMBERSHIP,$this->_query);}public function getTweets($listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}return $this->_getResponse(self::URL_GET_STATUS,$this->_query);}public function getSubscribers($listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}return $this->_getResponse(self::URL_SUBSCRIBER,$this->_query);}public function getSubscriptions($id){Eden_Twitter_Error::i()->argument(1,'int','string');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}return $this->_getResponse(self::URL_GET_SUBSCRITION,$this->_query);}public function filterToOwn(){$this->_query['filter_to_owned_lists']=true;return $this;}public function includeEntities(){$this->_query['include_entities']=true;return $this;}public function includeRts(){$this->_query['include_rts']=true;return $this;}public function isMember($userId,$listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string')->argument(3,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}if(is_int($user_id)){$this->_query['user_id']=$user_id;}else{$this->_query['screen_name']=$user_id;}return $this->_getResponse(self::URL_GET_MEMBER,$this->_query);}public function isSubsciber($userId,$listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string')->argument(3,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}if(is_int($user_id)){$query['user_id']=$user_id;}else{$this->_query['screen_name']=$user_id;}return $this->_getResponse(self::URL_SHOW_SUBSCRIBER,$this->_query);}public function remove($listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string','null');if(is_int($listId)){$qthis->_uery['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}return $this->_post(self::URL_REMOVE,$this->_query);}public function removeMember($userId,$listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string')->argument(3,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}if(is_int($user_id)){$this->_query['user_id']=$ownerId;}else{$this->_query['screen_name']=$ownerId;}return $this->_post(self::URL_REMOVE_MEMBER,$this->_query);}public function setCount($count){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['count']=$count;return $this;}public function setCursor($cursor){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['cursor']=$cursor;return $this;}public function setMax($max){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['max_id']=$max;return $this;}public function setPage($perPage){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['per_page']=$perPage;return $this;}public function setSinceId($sinceId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['since_id']=$sinceId;return $this;}public function setDescription($description){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['description']=$description;return $this;}public function setModeToPrivate(){$this->_query['mode']='private';return $this;}public function skipStatus(){$this->_query['skip_status']=true;return $this;}public function subscribe($listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}return $this->_post(self::URL_CREATE_SUBCRIBER,$this->_query);}public function unsubscribe($listId,$ownerId=NULL){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'int','string','null');if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}return $this->_post(self::URL_REMOVE_SUBCRIBER,$this->_query);}public function update($listId,$name,$description,$ownerId=NULL,$public=true){Eden_Twitter_Error::i()->argument(1,'int','string')->argument(2,'string')->argument(3,'string')->argument(4,'int','string','null')->argument(5,'bool');$this->_query['name']=$name;$this->_query['description']=$description;if(is_int($listId)){$this->_query['list_id']=$listId;}else{$this->_query['slug']=$listId;}if(!is_null($ownerId)){if(is_int($ownerId)){$this->_query['owner_id']=$ownerId;}else{$this->_query['owner_screen_name']=$ownerId;}}return $this->_post(self::URL_UPDATE,$this->_query);}}}
/* Eden_Twitter_Saved */
if(!class_exists('Eden_Twitter_Saved')){class Eden_Twitter_Saved extends Eden_Twitter_Base{const URL_SAVED_SEARCHES='https://api.twitter.com/1.1/saved_searches/list.json';const URL_GET_DETAIL='https://api.twitter.com/1.1/saved_searches/show/%d.json';const URL_CREATE_SEARCH='https://api.twitter.com/1.1/saved_searches/create.json';const URL_REMOVE='https://api.twitter.com/1.1/saved_searches/destroy/%d.json';public static function i(){return self::_getMultiple(__CLASS__);}public function createSearch($query){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['query']=$query;return $this->_post(self::URL_CREATE_SEARCH,$this->_query);}public function getDetail($id){Eden_Twitter_Error::i()->argument(1,'int');return $this->_getResponse(sprintf(self::URL_GET_DETAIL,$id));}public function getSavedSearches(){return $this->_getResponse(self::URL_SAVED_SEARCHES);}public function remove($id){Eden_Twitter_Error::i()->argument(1,'int');return $this->_post(sprintf(self::URL_REMOVE,$id));}}}
/* Eden_Twitter_Search */
if(!class_exists('Eden_Twitter_Search')){class Eden_Twitter_Search extends Eden_Twitter_Base{const URL_SEARCH_TWEETS='https://api.twitter.com/1.1/search/tweets.json';public static function i(){return self::_getMultiple(__CLASS__);}public function search($query){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['q']=$query;return $this->_getResponse(self::URL_SEARCH,$this->_query);}public function setCallback($callback){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['callback']=$callback;return $this;}public function includeEntities(){$this->_query['include_entities']=true;return $this;}public function setGeocode($geocode){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['geocode']=$geocode;return $this;}public function setLanguage($language){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['lang']=$language;return $this;}public function setLocale($locale){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['locale']=$locale;return $this;}public function setPage($page){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['page']=$page;return $this;}public function setMixedResultType(){$this->_query['result_type']='mixed';return $this;}public function setRecentResultType(){$this->_query['result_type']='recent';return $this;}public function setPopularResultType(){$this->_query['result_type']='popular';return $this;}public function setRpp($rpp){Eden_Twitter_Error::i()->argument(1,'string');if($rpp > 100){$rpp=100;}$this->_query['rpp']=$rpp;return $this;}public function setSinceId($sinceId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['since_id']=$sinceId;return $this;}public function showUser(){$this->_query['show_user']=true;return $this;}public function setUntil($until){Eden_Twitter_Error::i()->argument(1,'string','int');if(is_string($until)){$until=strtotime($until);}$until=date('Y-m-d',$until);$this->_query['until']=$until;return $this;}}}
/* Eden_Twitter_Spam */
if(!class_exists('Eden_Twitter_Spam')){class Eden_Twitter_Spam extends Eden_Twitter_Base{const URL_REPORT_SPAM='https://api.twitter.com/1.1/users/report_spam.json';public static function i(){return self::_getMultiple(__CLASS__);}public function reportSpam($id=NULL,$name=NULL){Eden_Twitter_Error::i()->argument(1,'string','null')->argument(2,'string','null');if(!is_null($id)){$this->_query['user_id']=$id;}if(!is_null($name)){$this->_query['screen_name']=$name;}return $this->_post(self::URL_REPORT_SPAM,$this->_query);}}}
/* Eden_Twitter_Streaming */
if(!class_exists('Eden_Twitter_Streaming')){class Eden_Twitter_Streaming extends Eden_Twitter_Base{const URL_STREAM_PUBLIC_STATUS='https://stream.twitter.com/1.1/statuses/filter.json';const URL_STREAM_RANDOM_STATUS='https://stream.twitter.com/1.1/statuses/sample.json';const URL_STREAM_FIRE_HOSE='https://stream.twitter.com/1.1/statuses/firehose.json';const URL_STREAM_USER_MESSAGE='https://userstream.twitter.com/1.1/user.json';const URL_STREAM_SITE='https://sitestream.twitter.com/1.1/site.json';public static function i(){return self::_getMultiple(__CLASS__);}public function streamPublicStatus(){return $this->_post(self::URL_STREAM_PUBLIC_STATUS,$this->_query);}public function streamRandomStatus(){return $this->_getResponse(self::URL_STREAM_RANDOM_STATUS,$this->_query);}public function fireHose(){return $this->_getResponse(self::URL_STREAM_FIRE_HOSE,$this->_query);}public function streamMessage(){return $this->_getResponse(self::URL_STREAM_FIRE_HOSE,$this->_query);}public function streamSite(){return $this->_getResponse(self::URL_STREAM_SITE,$this->_query);}public function streamWithFollowings(){$this->_query['with']='followings';return $this;}public function steamWithReplies(){$this->_query['replies']='all';return $this;}public function setCount($count){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['count']=$count;return $this;}public function setFollow($follow){Eden_Twitter_Error::i()->argument(1,'string','array');if(is_array($follow)){$this->_query['follow']=implode(',',$follow);}else{$this->_query['follow']=$follow;}return $this;}public function setTrack($track){Eden_Twitter_Error::i()->argument(1,'string','array');if(is_array($track)){$this->_query['track']=implode(',',$track);}else{$this->_query['track']=$track;}return $this;}public function setLocation($locations){Eden_Twitter_Error::i()->argument(1,'string','array');if(is_array($track)){$this->_query['locations']=implode(',',$locations);}else{$this->_query['locations']=$locations;}return $this;}public function setDelimited(){$this->_query['delimited']='length';return $this;}public function setStallWarning(){$this->_query['stall_warnings']=true;return $this;}}}
/* Eden_Twitter_Suggestions */
if(!class_exists('Eden_Twitter_Suggestions')){class Eden_Twitter_Suggestions extends Eden_Twitter_Base{const URL_GET_CATEGORY='https://api.twitter.com/1.1/users/suggestions/%s.json';const URL_FAVORITES='https://api.twitter.com/1.1/favorites/list.json';const URL_SUGGESTIONS='https://api.twitter.com/1/users/suggestions/%s/members.json';public static function i(){return self::_getMultiple(__CLASS__);}public function getCategory($slug,$lang=NULL){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string','null');if(!is_null($lang)){$this->_query['lang']=$lang;}return $this->_getResponse(sprintf(self::URL_GET_CATEGORY,$slug),$this->_query);}public function getFavorites($id=NULL){Eden_Twitter_Error::i()->argument(1,'string','int','null');if(is_int($id)){$this->_query['user_id']=$id;}if(is_string($id)){$this->_query['screen_name']=$id;}return $this->_getResponse(self::URL_FAVORITES,$this->_query);}public function getUserByStatus($slug){Eden_Twitter_Error::i()->argument(1,'string');return $this->_getResponse(sprintf(self::URL_SUGGESTIONS,$slug));}public function setCount($count){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['count']=$count;return $this;}public function setSinceId($sinceId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['since_id']=$sinceId;return $this;}public function setMaxId($maxId){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['max_id']=$maxId;return $this;}public function includeEntities(){$this->_query['include_entities']=false;return $this;}}}
/* Eden_Twitter_Timeline */
if(!class_exists('Eden_Twitter_Timeline')){class Eden_Twitter_Timeline extends Eden_Twitter_Base{const URL_TIMELINES_MENTION='https://api.twitter.com/1.1/statuses/mentions_timeline.json';const URL_TIMELINES_USER='https://api.twitter.com/1.1/statuses/user_timeline.json';const URL_TIMELINES_HOME='https://api.twitter.com/1.1/statuses/home_timeline.json';public static function i(){return self::_getMultiple(__CLASS__);}public function getMentionTimeline(){return $this->_getResponse(self::URL_TIMELINES_MENTION,$this->_query);}public function getUserTimelines($id=NULL){Eden_Twitter_Error::i()->argument(1,'int','string');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}return $this->_getResponse(self::URL_TIMELINES_USER,$this->_query);}public function getYourTimeLine(){return $this->_getResponse(self::URL_TIMELINES_MENTION,$this->_query);}public function setSinceId($sinceId){Eden_Twitter_Error::i()->argument(1,'int','string');$this->_query['since_id']=$sinceId;return $this;}public function setCount($count){Eden_Twitter_Error::i()->argument(1,'int','string');$this->_query['count']=$count;return $this;}public function setMaxId($maxId){Eden_Twitter_Error::i()->argument(1,'int','string');$this->_query['max_id']=$maxId;return $this;}public function trimUser(){$this->_query['trim_user']=true;return $this;}public function excludeReplies(){$this->_query['exclude_replies']=true;return $this;}public function setContributorDetails(){$this->_query['contributor_details']=true;return $this;}public function includeRts(){$this->_query['include_rts']=false;return $this;}}}
/* Eden_Twitter_Trends */
if(!class_exists('Eden_Twitter_Trends')){class Eden_Twitter_Trends extends Eden_Twitter_Base{const URL_TRENDING_PLACE='https://api.twitter.com/1.1/trends/place.json';const URL_TRENDING_AVAILABLE='https://api.twitter.com/1.1/trends/available.json';const URL_TRENDING_CLOSEST='https://api.twitter.com/1.1/trends/closest.json';public static function i(){return self::_getMultiple(__CLASS__);}public function getPlaceTrending($id){Eden_Twitter_Error::i()->argument(1,'string','int');$this->_query['id']=$id;return $this->_getResponse(self::URL_TRENDING_PLACE,$this->_query);}public function getAvailableTrending(){return $this->_getResponse(self::URL_TRENDING_AVAILABLE);}public function getClosestTrending($lat=NULL,$long=NULL){Eden_Twitter_Error::i()->argument(1,'float','null')->argument(2,'float','null');if(!is_null($lat)){$this->_query['lat']=$lat;}if(!is_null($long)){$this->_query['long']=$long;}return $this->_getResponse(self::URL_TRENDING_CLOSEST,$this->_query);}}}
/* Eden_Twitter_Tweets */
if(!class_exists('Eden_Twitter_Tweets')){class Eden_Twitter_Tweets extends Eden_Twitter_Base{const URL_TWEETS_GET_RETWEET='https://api.twitter.com/1.1/statuses/retweets/%s.json';const URL_TWEETS_GET_TWEET='https://api.twitter.com/1.1/statuses/show.json';const URL_TWEETS_REMOVE_TWEET='https://api.twitter.com/1.1/statuses/destroy/%s.json';const URL_TWEETS_TWEET='https://api.twitter.com/1.1/statuses/update.json';const URL_TWEETS_RETWEET='https://api.twitter.com/1.1/statuses/retweet/%s.json';const URL_TWEETS_TWEET_MEDIA='https://api.twitter.com/1.1/statuses/update_with_media.json';public static function i(){return self::_getMultiple(__CLASS__);}public function getRetweet($id){Eden_Twitter_Error::i()->argument(1,'int','string');return $this->_getResponse(sprintf(self::URL_TWEETS_GET_RETWEET,$id),$this->_query);}public function getTweet($id){Eden_Twitter_Error::i()->argument(1,'int','string');$this->_query['id']=$id;return $this->_getResponse(self::URL_TWEETS_GET_TWEET,$this->_query);}public function removeTweet($id){Eden_Twitter_Error::i()->argument(1,'int','string');return $this->_post(sprintf(self::URL_TWEETS_REMOVE_TWEET,$id),$this->_query);}public function tweet($status){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['status']=$status;return $this->_post(self::URL_TWEETS_TWEET,$this->_query);}public function retweet($tweetId){Eden_Twitter_Error::i()->argument(1,'string');return $this->_post(sprintf(self::URL_TWEETS_RETWEET,$tweetId),$this->_query);}public function tweetMedia($status,$media){Eden_Twitter_Error::i()->argument(1,'string')->argument(2,'string');$this->_query['status']=$status;$this->_query['media[]']=$media;return $this->_upload(self::URL_TWEETS_TWEET_MEDIA,$this->_query);}public function inReplyToStatusId($statusId){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['in_reply_to_status_id']=$statusId;return $this;}public function setLatitude($latutide){Eden_Twitter_Error::i()->argument(1,'float');$this->_query['lat']=$latutide;return $this;}public function setLongtitude($longtitude){Eden_Twitter_Error::i()->argument(1,'float');$this->_query['long']=$longtitude;return $this;}public function setPlaceId($placeId){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['place_id']=$placeId;return $this;}public function setCount($count){Eden_Twitter_Error::i()->argument(1,'int');if($count <=100){$this->_query['count']=$count;}else{$this->_query['count']=100;}return $this;}public function displayCoordinates(){$this->_query['display_coordinates']=true;return $this;}public function trimUser(){$this->_query['trim_user']=true;return $this;}public function includeEntities(){$this->_query['include_entities']=false;return $this;}public function includeMyRetweet(){$this->_query['include_my_retweet']=true;return $this;}public function possiblySensitive(){$this->_query['possibly_sensitive']=true;return $this;}}}
/* Eden_Twitter_Users */
if(!class_exists('Eden_Twitter_Users')){class Eden_Twitter_Users extends Eden_Twitter_Base{const URL_USERS_SETTING='https://api.twitter.com/1.1/account/settings.json';const URL_USERS_VERIFY_CREDENTIALS='https://api.twitter.com/1.1/account/verify_credentials.json';const URL_USERS_UPDATE_DEVICE='https://api.twitter.com/1.1/account/update_delivery_device.json';const URL_USERS_UPDATE_PROFILE='https://api.twitter.com/1.1/account/update_profile.json';const URL_USERS_UPDATE_BACKGROUND='https://api.twitter.com/1.1/account/update_profile_background_image.json';const URL_UPDATE_PROFILE_COLOR='https://api.twitter.com/1.1/account/update_profile_colors.json';const URL_ACCOUNT_UPLOAD='https://api.twitter.com/1.1/account/update_profile_image.json';const URL_USERS_BLOCK_LIST='https://api.twitter.com/1.1/blocks/list.json';const URL_GET_BLOCKING_ID='https://api.twitter.com/1.1/blocks/ids.json';const URL_CREATE_BLOCKING='https://api.twitter.com/1.1/blocks/create.json';const URL_REMOVE_BLOCKING='https://api.twitter.com/1.1/blocks/destroy.json';const URL_LOOK_UP='https://api.twitter.com/1.1/users/lookup.json';const URL_SEARCH='https://api.twitter.com/1/users/search.json';const URL_SHOW='https://api.twitter.com/1/users/show.json';const URL_CONTRIBUTEES='https://api.twitter.com/1/users/contributees.json';const URL_CONTRIBUTORS='https://api.twitter.com/1/users/contributors.json';protected $_id=NULL;protected $_name=NULL;protected $_size=NULL;protected $_page=NULL;protected $_perpage=NULL;protected $_entities=NULL;protected $_status=NULL;public static function i(){return self::_getMultiple(__CLASS__);}public function getAccountSettings(){return $this->_getResponse(self::URL_USERS_SETTING);}public function getCredentials(){return $this->_getResponse(self::URL_USERS_VERIFY_CREDENTIALS,$this->_query);}public function updateDeliveryDevice($device){Eden_Twitter_Error::i()->argument(1,'int','string');$this->_query['device']=$device;return $this->_post(self::URL_USERS_UPDATE_DEVICE,$this->_query);}public function updateProfile(){return $this->_post(self::URL_USERS_UPDATE_PROFILE,$this->_query);}public function updateBackgroundImage($image){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['image']=$image;return $this->_upload(self::URL_UPDATE_BACKGROUND,$this->_query);}public function updateProfileColor(){return $this->_post(self::URL_UPDATE_PROFILE_COLOR,$this->_query);}public function updateProfileImage($image){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['image']=$image;return $this->_upload(self::URL_ACCOUNT_UPLOAD,$this->_query);}public function getBlockList(){return $this->_getResponse(self::URL_USERS_BLOCK_LIST,$this->_query);}public function getBlockedUserIds($stringify=false){Eden_Twitter_Error::i()->argument(1,'bool');$this->_query['stringify_ids']=$stringify;return $this->_getResponse(self::URL_GET_BLOCKING_ID,$this->_query);}public function blockUser($id){Eden_Twitter_Error::i()->argument(1,'string','int');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}return $this->_post(self::URL_CREATE_BLOCKING,$this->_query);}public function unblock($id){Eden_Twitter_Error::i()->argument(1,'string','int');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}return $this->_post(self::URL_REMOVE_BLOCKING,$this->_query);}public function lookupFriends(){if(is_int($this->_query['user_id'])){$id=explode(',',$this->_query['user_id']);$id=array();$this->_query['user_id']=$id;}if(is_string($this->_query['screen_name'])){$name=explode(',',$this->_query['screen_name']);$name=array();$this->_query['screen_name']=$name;}return $this->_getResponse(self::URL_LOOK_UP,$this->_query);}public function getContributees($id=NULL,$name=NULL){Eden_Twitter_Error::i()->argument(1,'string','null')->argument(2,'string','null');if($this->_id){$this->_query['user_id']=$id;}if($this->_name){$this->_query['screen_name']=$name;}return $this->_getResponse(self::URL_CONTRIBUTEES,$this->_query);}public function getContributors($id=NULL,$name=NULL){Eden_Twitter_Error::i()->argument(1,'string','null')->argument(2,'string','null');if($this->_id){$this->_query['user_id']=$id;}if($this->_name){$this->_query['screen_name']=$name;}return $this->_getResponse(self::URL_CONTRIBUTORS,$this->_query);}public function getDetail($id){Eden_Twitter_Error::i()->argument(1,'int','string');if(is_int($id)){$this->_query['user_id']=$id;}else{$this->_query['screen_name']=$id;}return $this->_getResponse(self::URL_SHOW,$this->_query);}public function search($search){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['q']=$search;return $this->_getResponse(self::URL_SEARCH,$this->_query);}public function setName($name){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['name']=$name;return $this;}public function setUrl($url){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['url']=$url;return $this;}public function setDescription($description){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['description']=$description;return $this;}public function setLocation($location){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['location']=$location;return $this;}public function setToTile(){$this->_query['tile']=true;return $this;}public function disableProfileBackground(){$this->_query['use']=false;return $this;}public function setBackgroundColor($background){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['profile_background_color']=$backgroud;return $this;}public function setBorderColor($border){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['profile_sidebar_border_color']=$border;return $this;}public function setFillColor($fill){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['profile_sidebar_fill_color']=$fill;return $this;}public function setLinkColor($link){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['profile_link_color']=$link;return $this;}public function setTextColor($textColor){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['profile_text_color']=$textColor;return $this;}public function includeEntities(){$this->_query['include_entities']=true;return $this;}public function setUserId($id){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['user_id']=$id;return $this;}public function setScreenName($name){Eden_Twitter_Error::i()->argument(1,'string');$this->_query['screen_name']=$name;return $this;}public function setPage($page){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['page']=$page;return $this;}public function setPerpage($perPage){Eden_Twitter_Error::i()->argument(1,'int');$this->_query['per_page']=$perPage;return $this;}public function skipStatus(){$this->_query['skip_status']=true;$this->_status=true;return $this;}}}
